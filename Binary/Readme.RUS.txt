Это поект по исользованию платы BluePill в среде STM32Cube, с почти полноценной отладкой по USB. Это немого круче чем просто "Arduino".

1. Прошить загрузчик Bootloader.bin в STM32F103C8, адрес обычный 0x8000000.
2. Перезапустить плату Windows должна автоматически установить драйвера WinUSB.
3. Запустить GdbServer. Если ругнется firewall или антивирус,- разрешить. Код не содержит вируса, просто исопльзует socket на на порту 2000 для обработки команд GDB клиента (arm-none-eabi-gdb.exe).
4. Загрузить демо-проект из каталога Applicaion в среде STM32Cube.
5. Скомпилировать его и настроить отладку, согласно картинке BluePillDebugerConfig.jpg
6. Запустить отладку. Тестовый код будет прошит в плату.
7. Дальше как обычно можно отлаживаться.

Что делать нельзя:
1. Нельзя зацикливать обрабтчики прерываний. Это приведет к невозможности выхода из них для перепрошивки платы.
2. Нельзя менять приоритет прерываний на меньший чем 0x30. Т.е. можно использовать от 0x30 до 0xFF, хотя по факту до 0xF0. В противном случае это приведет к выполнению прерываний с приоритетом меншьмим чем прерывание DebugMon. Соотвтественно в процессе подготовки к прошиванию Flash bootloader не сможет завершить в пошаговом режиме все прерывания. Код выполняемый в прерывании будет лежать в перепрошиваемой Flash памяти что в приведет к неотлавливаемому HardFault.
Теоретически на будущее, я планировал запускать пользовательский обработчик прерываний в контексте потока, а поток сделать Unprivelerged. Тогда все проблемы будут решены.
3. Нельзя менять базу адресов векторов прерываний. Смотри пункт 2.
4. Трогать регистры отвечающие за систему тактирования как в коде, так и из среды отладки. Это может привести к тому что отвлаится USB.

*Конечно все эти нельзя делать можно, просто нужно будет стереть потом плату через SWD или через встроенный Bootloader и записать загрзучик заново.

Что делать можно в среде разработки:
1. Прошивать плату через GDB, т.е. прямо в среде отладки как обычно
2. Ходить по шагам. Хоть в ассемблерном коде, хоть C.
3. Просматривать регистры и изменять их значения. Не меняйте SP. Поменять его можно но последствия...
4. Просматривать память, записвать в память. Соотвтетственно доступны все переменные.
5. Просматривать область памяти переферии, а так же писать в эту область.
6. Использовать printf для вывода отладочной информации в консоль. В прерываниях делать это не рекомендуется, но работать будет. Отладка будет выводится в консоли GDB Server-а.
7. После отключения отдадчика прошивка будет запущена. Если на плату просто подать питание, без подключения к USB,- она будет выполнять последний запущенный код.

Да. На самом деле данный проект имеет статус прототип, по этому я "поговонокодил" в нем. Теперь, когда ряд моментов известен, можно написть все правильно. Почему прототип? А вы знали что стирать Flash память микроконтроллера STM32F103C8T6 нельзя в обработчике прерывания. Она просто не стирвается. Для этого нужно запустить стирание в контекте потока. Или знали например что осуществлять возврат из обработчика прерываний в контекст потока, если ваше прерываение прервало другой обработчика можно, но это иногда приводит к HardFault. И еще много всяких ньюансов.

Последний Update проекта 05.03.2021 (DD.MM.YYYY).

С Уважением,
Соболев Евгений Вячеславович
+79081375847
+79525467157
e-mail: evgeny@vrnnet.ru
e-mail: hwswdevelop@gmail.com
skype: evgenysbl
