
Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001434  08004130  08004130  00004130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005564  08005564  00005564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005650  08005650  00011064  2**0
                  CONTENTS
  4 .ARM          00000000  08005650  08005650  00011064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005650  08005650  00011064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005650  08005650  00005650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005654  08005654  00005654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20001000  08005658  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20001064  080056bc  00011064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000109c  080056bc  0001109c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006314  00000000  00000000  0001108d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b6c  00000000  00000000  000173a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00017f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  000180c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000458e  00000000  00000000  00018220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022ce  00000000  00000000  0001c7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00011876  00000000  00000000  0001ea7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000302f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bf4  00000000  00000000  00030348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000004d9  00000000  00000000  00030f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004130 <__do_global_dtors_aux>:
 8004130:	b510      	push	{r4, lr}
 8004132:	4c05      	ldr	r4, [pc, #20]	; (8004148 <__do_global_dtors_aux+0x18>)
 8004134:	7823      	ldrb	r3, [r4, #0]
 8004136:	b933      	cbnz	r3, 8004146 <__do_global_dtors_aux+0x16>
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <__do_global_dtors_aux+0x1c>)
 800413a:	b113      	cbz	r3, 8004142 <__do_global_dtors_aux+0x12>
 800413c:	4804      	ldr	r0, [pc, #16]	; (8004150 <__do_global_dtors_aux+0x20>)
 800413e:	f3af 8000 	nop.w
 8004142:	2301      	movs	r3, #1
 8004144:	7023      	strb	r3, [r4, #0]
 8004146:	bd10      	pop	{r4, pc}
 8004148:	20001064 	.word	0x20001064
 800414c:	00000000 	.word	0x00000000
 8004150:	0800554c 	.word	0x0800554c

08004154 <frame_dummy>:
 8004154:	b508      	push	{r3, lr}
 8004156:	4b03      	ldr	r3, [pc, #12]	; (8004164 <frame_dummy+0x10>)
 8004158:	b11b      	cbz	r3, 8004162 <frame_dummy+0xe>
 800415a:	4903      	ldr	r1, [pc, #12]	; (8004168 <frame_dummy+0x14>)
 800415c:	4803      	ldr	r0, [pc, #12]	; (800416c <frame_dummy+0x18>)
 800415e:	f3af 8000 	nop.w
 8004162:	bd08      	pop	{r3, pc}
 8004164:	00000000 	.word	0x00000000
 8004168:	20001068 	.word	0x20001068
 800416c:	0800554c 	.word	0x0800554c

08004170 <_Z5setupv>:
#include <delay.h>
#include <stdint.h>
#include <gpio.h>


void setup(){
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
	printf("setup\n");
 8004174:	4806      	ldr	r0, [pc, #24]	; (8004190 <_Z5setupv+0x20>)
 8004176:	f000 fa99 	bl	80046ac <puts>
	PC13.mode(GpioMode::OutputPushPull, GpioOutputSpeed::Max50Mhz);
 800417a:	2103      	movs	r1, #3
 800417c:	2004      	movs	r0, #4
 800417e:	f000 f89d 	bl	80042bc <_ZN7GpioPinILm1073811456ELh13EE4modeE8GpioMode15GpioOutputSpeed>
	PA0.mode(GpioMode::OutputPushPull, GpioOutputSpeed::Max50Mhz);
 8004182:	2103      	movs	r1, #3
 8004184:	2004      	movs	r0, #4
 8004186:	f000 f8c1 	bl	800430c <_ZN7GpioPinILm1073809408ELh0EE4modeE8GpioMode15GpioOutputSpeed>
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	08005564 	.word	0x08005564

08004194 <_Z4loopv>:

void loop(){
 8004194:	b580      	push	{r7, lr}
 8004196:	b08c      	sub	sp, #48	; 0x30
 8004198:	af02      	add	r7, sp, #8

	uint32_t timeDiffMs = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	623b      	str	r3, [r7, #32]
	uint32_t stopTimeMs = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
	uint32_t startTimeMs = millis();
 80041a2:	f000 f96d 	bl	8004480 <millis>
 80041a6:	61b8      	str	r0, [r7, #24]
	PC13.reset();
 80041a8:	f000 f8d6 	bl	8004358 <_ZN7GpioPinILm1073811456ELh13EE5resetEv>
	for(uint32_t i = 0; i < 1000000; i++){
 80041ac:	2300      	movs	r3, #0
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	4a3c      	ldr	r2, [pc, #240]	; (80042a4 <_Z4loopv+0x110>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d80f      	bhi.n	80041d8 <_Z4loopv+0x44>
		PA0.set();
 80041b8:	f000 f8dc 	bl	8004374 <_ZN7GpioPinILm1073809408ELh0EE3setEv>
		PA0.invert();
 80041bc:	f000 f8e8 	bl	8004390 <_ZN7GpioPinILm1073809408ELh0EE6invertEv>
		PA0.set();
 80041c0:	f000 f8d8 	bl	8004374 <_ZN7GpioPinILm1073809408ELh0EE3setEv>
		PA0.reset();
 80041c4:	f000 f8f4 	bl	80043b0 <_ZN7GpioPinILm1073809408ELh0EE5resetEv>
		PA0.invert();
 80041c8:	f000 f8e2 	bl	8004390 <_ZN7GpioPinILm1073809408ELh0EE6invertEv>
		PA0.invert();
 80041cc:	f000 f8e0 	bl	8004390 <_ZN7GpioPinILm1073809408ELh0EE6invertEv>
	for(uint32_t i = 0; i < 1000000; i++){
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	3301      	adds	r3, #1
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	e7eb      	b.n	80041b0 <_Z4loopv+0x1c>
	}
	PC13.set();
 80041d8:	f000 f8f8 	bl	80043cc <_ZN7GpioPinILm1073811456ELh13EE3setEv>
	stopTimeMs = millis();
 80041dc:	f000 f950 	bl	8004480 <millis>
 80041e0:	61f8      	str	r0, [r7, #28]
	timeDiffMs = stopTimeMs - startTimeMs;
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	623b      	str	r3, [r7, #32]
	printf("Total time: %lu ms\n", timeDiffMs);
 80041ea:	6a39      	ldr	r1, [r7, #32]
 80041ec:	482e      	ldr	r0, [pc, #184]	; (80042a8 <_Z4loopv+0x114>)
 80041ee:	f000 f9d7 	bl	80045a0 <iprintf>

	uint32_t timeMs = millis();
 80041f2:	f000 f945 	bl	8004480 <millis>
 80041f6:	6178      	str	r0, [r7, #20]
	uint32_t timeS = timeMs / 1000;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4a2c      	ldr	r2, [pc, #176]	; (80042ac <_Z4loopv+0x118>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	613b      	str	r3, [r7, #16]
	uint32_t timeM = timeS / 60;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4a2a      	ldr	r2, [pc, #168]	; (80042b0 <_Z4loopv+0x11c>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	60fb      	str	r3, [r7, #12]
	uint32_t timeH = timeM / 60;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <_Z4loopv+0x11c>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	60bb      	str	r3, [r7, #8]
	uint32_t day = timeH / 24;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4a25      	ldr	r2, [pc, #148]	; (80042b4 <_Z4loopv+0x120>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	607b      	str	r3, [r7, #4]
	timeMs %= 1000;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	4a20      	ldr	r2, [pc, #128]	; (80042ac <_Z4loopv+0x118>)
 800422c:	fba2 1203 	umull	r1, r2, r2, r3
 8004230:	0992      	lsrs	r2, r2, #6
 8004232:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004236:	fb01 f202 	mul.w	r2, r1, r2
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	617b      	str	r3, [r7, #20]
	timeS %= 60;
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <_Z4loopv+0x11c>)
 8004242:	fba3 1302 	umull	r1, r3, r3, r2
 8004246:	0959      	lsrs	r1, r3, #5
 8004248:	460b      	mov	r3, r1
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a5b      	subs	r3, r3, r1
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	613b      	str	r3, [r7, #16]
	timeM %= 60;
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <_Z4loopv+0x11c>)
 8004258:	fba3 1302 	umull	r1, r3, r3, r2
 800425c:	0959      	lsrs	r1, r3, #5
 800425e:	460b      	mov	r3, r1
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a5b      	subs	r3, r3, r1
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	60fb      	str	r3, [r7, #12]
	timeH %= 24;
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <_Z4loopv+0x120>)
 800426e:	fba3 1302 	umull	r1, r3, r3, r2
 8004272:	0919      	lsrs	r1, r3, #4
 8004274:	460b      	mov	r3, r1
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	440b      	add	r3, r1
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	60bb      	str	r3, [r7, #8]
	printf("Time from start day %03lu time %02lu:%02lu:%02lu.%03lu\n",  day, timeH, timeM, timeS, timeMs);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	480a      	ldr	r0, [pc, #40]	; (80042b8 <_Z4loopv+0x124>)
 8004290:	f000 f986 	bl	80045a0 <iprintf>

	delay(1000);
 8004294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004298:	f000 f8cf 	bl	800443a <delay>

}
 800429c:	bf00      	nop
 800429e:	3728      	adds	r7, #40	; 0x28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	000f423f 	.word	0x000f423f
 80042a8:	0800556c 	.word	0x0800556c
 80042ac:	10624dd3 	.word	0x10624dd3
 80042b0:	88888889 	.word	0x88888889
 80042b4:	aaaaaaab 	.word	0xaaaaaaab
 80042b8:	08005580 	.word	0x08005580

080042bc <_ZN7GpioPinILm1073811456ELh13EE4modeE8GpioMode15GpioOutputSpeed>:
	static constexpr const uint32_t GpioAddress = GpioAddr;
	static constexpr const uint8_t  GpioPinNo = pinNo;
	static constexpr const uint32_t GpioPinMask = (1 << pinNo);
	static constexpr const uint32_t GpioConfPerReg = 8;

	static inline void mode(const GpioMode mode, const GpioOutputSpeed oSpeed = GpioOutputSpeed::Input){
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	460a      	mov	r2, r1
 80042c6:	71fb      	strb	r3, [r7, #7]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71bb      	strb	r3, [r7, #6]
			reinterpret_cast<volatile GPIO* const>(GpioAddress)->CRL |= ((static_cast<uint32_t>(oSpeed) & 0x03) << (maskOffset + 2));
		} else {
			static constexpr const uint32_t maskBitCount = 4;
			static constexpr const uint32_t maskOffset = (pinNo * maskBitCount) & 0x1F;
			static constexpr const uint32_t mask = (1 << (maskBitCount + 1)) - 1;
			reinterpret_cast<volatile GPIO* const>(GpioAddress)->CRL &= ~(mask << maskOffset);
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <_ZN7GpioPinILm1073811456ELh13EE4modeE8GpioMode15GpioOutputSpeed+0x4c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0d      	ldr	r2, [pc, #52]	; (8004308 <_ZN7GpioPinILm1073811456ELh13EE4modeE8GpioMode15GpioOutputSpeed+0x4c>)
 80042d2:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 80042d6:	6013      	str	r3, [r2, #0]
			reinterpret_cast<volatile GPIO* const>(GpioAddress)->CRL |= ((static_cast<uint32_t>(mode) & 0x03) << maskOffset);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <_ZN7GpioPinILm1073811456ELh13EE4modeE8GpioMode15GpioOutputSpeed+0x4c>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	051b      	lsls	r3, r3, #20
 80042e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80042e4:	4908      	ldr	r1, [pc, #32]	; (8004308 <_ZN7GpioPinILm1073811456ELh13EE4modeE8GpioMode15GpioOutputSpeed+0x4c>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
			reinterpret_cast<volatile GPIO* const>(GpioAddress)->CRL |= ((static_cast<uint32_t>(oSpeed) & 0x03) << (maskOffset + 2));
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <_ZN7GpioPinILm1073811456ELh13EE4modeE8GpioMode15GpioOutputSpeed+0x4c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	79bb      	ldrb	r3, [r7, #6]
 80042f0:	059b      	lsls	r3, r3, #22
 80042f2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80042f6:	4904      	ldr	r1, [pc, #16]	; (8004308 <_ZN7GpioPinILm1073811456ELh13EE4modeE8GpioMode15GpioOutputSpeed+0x4c>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	600b      	str	r3, [r1, #0]
		}
	}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40011000 	.word	0x40011000

0800430c <_ZN7GpioPinILm1073809408ELh0EE4modeE8GpioMode15GpioOutputSpeed>:
	static inline void mode(const GpioMode mode, const GpioOutputSpeed oSpeed = GpioOutputSpeed::Input){
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	460a      	mov	r2, r1
 8004316:	71fb      	strb	r3, [r7, #7]
 8004318:	4613      	mov	r3, r2
 800431a:	71bb      	strb	r3, [r7, #6]
			reinterpret_cast<volatile GPIO* const>(GpioAddress)->CRL &= ~(mask << maskOffset);
 800431c:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <_ZN7GpioPinILm1073809408ELh0EE4modeE8GpioMode15GpioOutputSpeed+0x48>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <_ZN7GpioPinILm1073809408ELh0EE4modeE8GpioMode15GpioOutputSpeed+0x48>)
 8004322:	f023 031f 	bic.w	r3, r3, #31
 8004326:	6013      	str	r3, [r2, #0]
			reinterpret_cast<volatile GPIO* const>(GpioAddress)->CRL |= ((static_cast<uint32_t>(mode) & 0x03) << maskOffset);
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <_ZN7GpioPinILm1073809408ELh0EE4modeE8GpioMode15GpioOutputSpeed+0x48>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	4908      	ldr	r1, [pc, #32]	; (8004354 <_ZN7GpioPinILm1073809408ELh0EE4modeE8GpioMode15GpioOutputSpeed+0x48>)
 8004334:	4313      	orrs	r3, r2
 8004336:	600b      	str	r3, [r1, #0]
			reinterpret_cast<volatile GPIO* const>(GpioAddress)->CRL |= ((static_cast<uint32_t>(oSpeed) & 0x03) << (maskOffset + 2));
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <_ZN7GpioPinILm1073809408ELh0EE4modeE8GpioMode15GpioOutputSpeed+0x48>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	79bb      	ldrb	r3, [r7, #6]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <_ZN7GpioPinILm1073809408ELh0EE4modeE8GpioMode15GpioOutputSpeed+0x48>)
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
	}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	40010800 	.word	0x40010800

08004358 <_ZN7GpioPinILm1073811456ELh13EE5resetEv>:
	static inline void set() {
		reinterpret_cast<volatile GPIO* const>(GpioAddress)->BSRR = GpioPinMask;
		asm volatile("dsb;");
	}

	static inline void reset(){
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
		reinterpret_cast<volatile GPIO* const>(GpioAddress)->BRR = GpioPinMask;
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <_ZN7GpioPinILm1073811456ELh13EE5resetEv+0x18>)
 800435e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004362:	615a      	str	r2, [r3, #20]
		asm volatile("dsb;");
 8004364:	f3bf 8f4f 	dsb	sy
	}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	40011000 	.word	0x40011000

08004374 <_ZN7GpioPinILm1073809408ELh0EE3setEv>:
	static inline void set() {
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
		reinterpret_cast<volatile GPIO* const>(GpioAddress)->BSRR = GpioPinMask;
 8004378:	4b04      	ldr	r3, [pc, #16]	; (800438c <_ZN7GpioPinILm1073809408ELh0EE3setEv+0x18>)
 800437a:	2201      	movs	r2, #1
 800437c:	611a      	str	r2, [r3, #16]
		asm volatile("dsb;");
 800437e:	f3bf 8f4f 	dsb	sy
	}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010800 	.word	0x40010800

08004390 <_ZN7GpioPinILm1073809408ELh0EE6invertEv>:

	static inline void invert(){
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
		reinterpret_cast<volatile GPIO* const>(GpioAddress)->ODR ^= GpioPinMask;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <_ZN7GpioPinILm1073809408ELh0EE6invertEv+0x1c>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <_ZN7GpioPinILm1073809408ELh0EE6invertEv+0x1c>)
 800439a:	f083 0301 	eor.w	r3, r3, #1
 800439e:	60d3      	str	r3, [r2, #12]
		asm volatile("dsb;");
 80043a0:	f3bf 8f4f 	dsb	sy
	}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	40010800 	.word	0x40010800

080043b0 <_ZN7GpioPinILm1073809408ELh0EE5resetEv>:
	static inline void reset(){
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
		reinterpret_cast<volatile GPIO* const>(GpioAddress)->BRR = GpioPinMask;
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <_ZN7GpioPinILm1073809408ELh0EE5resetEv+0x18>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	615a      	str	r2, [r3, #20]
		asm volatile("dsb;");
 80043ba:	f3bf 8f4f 	dsb	sy
	}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40010800 	.word	0x40010800

080043cc <_ZN7GpioPinILm1073811456ELh13EE3setEv>:
	static inline void set() {
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
		reinterpret_cast<volatile GPIO* const>(GpioAddress)->BSRR = GpioPinMask;
 80043d0:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <_ZN7GpioPinILm1073811456ELh13EE3setEv+0x18>)
 80043d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043d6:	611a      	str	r2, [r3, #16]
		asm volatile("dsb;");
 80043d8:	f3bf 8f4f 	dsb	sy
	}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	40011000 	.word	0x40011000

080043e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043e8:	480d      	ldr	r0, [pc, #52]	; (8004420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043ea:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80043ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043f0:	480c      	ldr	r0, [pc, #48]	; (8004424 <LoopForever+0x6>)
  ldr r1, =_edata
 80043f2:	490d      	ldr	r1, [pc, #52]	; (8004428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043f4:	4a0d      	ldr	r2, [pc, #52]	; (800442c <LoopForever+0xe>)
  movs r3, #0
 80043f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043f8:	e002      	b.n	8004400 <LoopCopyDataInit>

080043fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043fe:	3304      	adds	r3, #4

08004400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004404:	d3f9      	bcc.n	80043fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004406:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004408:	4c0a      	ldr	r4, [pc, #40]	; (8004434 <LoopForever+0x16>)
  movs r3, #0
 800440a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800440c:	e001      	b.n	8004412 <LoopFillZerobss>

0800440e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800440e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004410:	3204      	adds	r2, #4

08004412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004414:	d3fb      	bcc.n	800440e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004416:	f000 f897 	bl	8004548 <__libc_init_array>
/* Call the application's entry point.*/
  bl mainInternal
 800441a:	f000 f82a 	bl	8004472 <mainInternal>

0800441e <LoopForever>:

LoopForever:
    b LoopForever
 800441e:	e7fe      	b.n	800441e <LoopForever>
  ldr   r0, =_estack
 8004420:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004424:	20001000 	.word	0x20001000
  ldr r1, =_edata
 8004428:	20001064 	.word	0x20001064
  ldr r2, =_sidata
 800442c:	08005658 	.word	0x08005658
  ldr r2, =_sbss
 8004430:	20001064 	.word	0x20001064
  ldr r4, =_ebss
 8004434:	2000109c 	.word	0x2000109c

08004438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004438:	e7fe      	b.n	8004438 <ADC1_2_IRQHandler>

0800443a <delay>:
 *  Created on: Mar 6, 2021
 *      Author: Evgeny
 */
#include "delay.h"

void delay(uint32_t waitTimeMs){
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
	// Wait outside system
	volatile const uint32_t currentTime = millis();
 8004442:	f000 f81d 	bl	8004480 <millis>
 8004446:	4603      	mov	r3, r0
 8004448:	60fb      	str	r3, [r7, #12]
	volatile const uint32_t endTime = currentTime + waitTimeMs;
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	60bb      	str	r3, [r7, #8]
	while(endTime > millis());
 8004452:	f000 f815 	bl	8004480 <millis>
 8004456:	4602      	mov	r2, r0
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	bf34      	ite	cc
 800445e:	2301      	movcc	r3, #1
 8004460:	2300      	movcs	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d000      	beq.n	800446a <delay+0x30>
 8004468:	e7f3      	b.n	8004452 <delay+0x18>
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <mainInternal>:

void setup(void);
void loop(void);

extern "C" void mainInternal(void)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	af00      	add	r7, sp, #0
	setup();
 8004476:	f7ff fe7b 	bl	8004170 <_Z5setupv>
	while(true){
		loop();
 800447a:	f7ff fe8b 	bl	8004194 <_Z4loopv>
 800447e:	e7fc      	b.n	800447a <mainInternal+0x8>

08004480 <millis>:
 .section .text.millis,"ax",%progbits
 .global millis
 .thumb
 .align 4
millis:
  push {r0,r3}
 8004480:	b409      	push	{r0, r3}
  mov r0, sp
 8004482:	4668      	mov	r0, sp
  movs r3, #2
 8004484:	2302      	movs	r3, #2
  svc 0
 8004486:	df00      	svc	0
  pop {r0, r3}
 8004488:	bc09      	pop	{r0, r3}
  bx lr
 800448a:	4770      	bx	lr

0800448c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800448c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800448e:	1e16      	subs	r6, r2, #0
 8004490:	dd07      	ble.n	80044a2 <_read+0x16>
 8004492:	460c      	mov	r4, r1
 8004494:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8004496:	f3af 8000 	nop.w
 800449a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800449e:	42a5      	cmp	r5, r4
 80044a0:	d1f9      	bne.n	8004496 <_read+0xa>
	}

return len;
}
 80044a2:	4630      	mov	r0, r6
 80044a4:	bd70      	pop	{r4, r5, r6, pc}
 80044a6:	bf00      	nop

080044a8 <_write>:
	asm volatile ("mov r0, %0; mov r1, %1; movs r3, #3; svc 0;" :: "r" (dataAddress), "r"(dataSize));
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
	if (file == 1){
 80044a8:	2801      	cmp	r0, #1
{
 80044aa:	b570      	push	{r4, r5, r6, lr}
 80044ac:	460c      	mov	r4, r1
 80044ae:	4616      	mov	r6, r2
	if (file == 1){
 80044b0:	d00b      	beq.n	80044ca <_write+0x22>
		writeSerial(ptr, len);
	} else {
		int DataIdx;
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044b2:	2a00      	cmp	r2, #0
 80044b4:	bfc8      	it	gt
 80044b6:	188d      	addgt	r5, r1, r2
 80044b8:	dd05      	ble.n	80044c6 <_write+0x1e>
		{
			__io_putchar(*ptr++);
 80044ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 80044be:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044c2:	42a5      	cmp	r5, r4
 80044c4:	d1f9      	bne.n	80044ba <_write+0x12>
		}
	}
	return len;
}
 80044c6:	4630      	mov	r0, r6
 80044c8:	bd70      	pop	{r4, r5, r6, pc}
	asm volatile ("mov r0, %0; mov r1, %1; movs r3, #3; svc 0;" :: "r" (dataAddress), "r"(dataSize));
 80044ca:	4608      	mov	r0, r1
 80044cc:	4611      	mov	r1, r2
 80044ce:	2303      	movs	r3, #3
 80044d0:	df00      	svc	0
}
 80044d2:	4630      	mov	r0, r6
 80044d4:	bd70      	pop	{r4, r5, r6, pc}
 80044d6:	bf00      	nop

080044d8 <_close>:

int _close(int file)
{
	return -1;
}
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop

080044e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80044e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80044e4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80044e6:	604b      	str	r3, [r1, #4]
}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop

080044ec <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80044ec:	2001      	movs	r0, #1
 80044ee:	4770      	bx	lr

080044f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80044f0:	2000      	movs	r0, #0
 80044f2:	4770      	bx	lr

080044f4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044f4:	490d      	ldr	r1, [pc, #52]	; (800452c <_sbrk+0x38>)
{
 80044f6:	4603      	mov	r3, r0
 80044f8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044fa:	4a0d      	ldr	r2, [pc, #52]	; (8004530 <_sbrk+0x3c>)
 80044fc:	4c0d      	ldr	r4, [pc, #52]	; (8004534 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80044fe:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004500:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004502:	b120      	cbz	r0, 800450e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004504:	4403      	add	r3, r0
 8004506:	4293      	cmp	r3, r2
 8004508:	d807      	bhi.n	800451a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800450a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800450c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800450e:	4c0a      	ldr	r4, [pc, #40]	; (8004538 <_sbrk+0x44>)
 8004510:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8004512:	4403      	add	r3, r0
 8004514:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8004516:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8004518:	d9f7      	bls.n	800450a <_sbrk+0x16>
    errno = ENOMEM;
 800451a:	f000 f80f 	bl	800453c <__errno>
 800451e:	220c      	movs	r2, #12
 8004520:	4603      	mov	r3, r0
    return (void *)-1;
 8004522:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8004526:	601a      	str	r2, [r3, #0]
}
 8004528:	bd10      	pop	{r4, pc}
 800452a:	bf00      	nop
 800452c:	20001080 	.word	0x20001080
 8004530:	20005000 	.word	0x20005000
 8004534:	00000400 	.word	0x00000400
 8004538:	200010a0 	.word	0x200010a0

0800453c <__errno>:
 800453c:	4b01      	ldr	r3, [pc, #4]	; (8004544 <__errno+0x8>)
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20001000 	.word	0x20001000

08004548 <__libc_init_array>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	2600      	movs	r6, #0
 800454c:	4d0c      	ldr	r5, [pc, #48]	; (8004580 <__libc_init_array+0x38>)
 800454e:	4c0d      	ldr	r4, [pc, #52]	; (8004584 <__libc_init_array+0x3c>)
 8004550:	1b64      	subs	r4, r4, r5
 8004552:	10a4      	asrs	r4, r4, #2
 8004554:	42a6      	cmp	r6, r4
 8004556:	d109      	bne.n	800456c <__libc_init_array+0x24>
 8004558:	f000 fff8 	bl	800554c <_init>
 800455c:	2600      	movs	r6, #0
 800455e:	4d0a      	ldr	r5, [pc, #40]	; (8004588 <__libc_init_array+0x40>)
 8004560:	4c0a      	ldr	r4, [pc, #40]	; (800458c <__libc_init_array+0x44>)
 8004562:	1b64      	subs	r4, r4, r5
 8004564:	10a4      	asrs	r4, r4, #2
 8004566:	42a6      	cmp	r6, r4
 8004568:	d105      	bne.n	8004576 <__libc_init_array+0x2e>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004570:	4798      	blx	r3
 8004572:	3601      	adds	r6, #1
 8004574:	e7ee      	b.n	8004554 <__libc_init_array+0xc>
 8004576:	f855 3b04 	ldr.w	r3, [r5], #4
 800457a:	4798      	blx	r3
 800457c:	3601      	adds	r6, #1
 800457e:	e7f2      	b.n	8004566 <__libc_init_array+0x1e>
 8004580:	08005650 	.word	0x08005650
 8004584:	08005650 	.word	0x08005650
 8004588:	08005650 	.word	0x08005650
 800458c:	08005654 	.word	0x08005654

08004590 <memset>:
 8004590:	4603      	mov	r3, r0
 8004592:	4402      	add	r2, r0
 8004594:	4293      	cmp	r3, r2
 8004596:	d100      	bne.n	800459a <memset+0xa>
 8004598:	4770      	bx	lr
 800459a:	f803 1b01 	strb.w	r1, [r3], #1
 800459e:	e7f9      	b.n	8004594 <memset+0x4>

080045a0 <iprintf>:
 80045a0:	b40f      	push	{r0, r1, r2, r3}
 80045a2:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <iprintf+0x2c>)
 80045a4:	b513      	push	{r0, r1, r4, lr}
 80045a6:	681c      	ldr	r4, [r3, #0]
 80045a8:	b124      	cbz	r4, 80045b4 <iprintf+0x14>
 80045aa:	69a3      	ldr	r3, [r4, #24]
 80045ac:	b913      	cbnz	r3, 80045b4 <iprintf+0x14>
 80045ae:	4620      	mov	r0, r4
 80045b0:	f000 fa5e 	bl	8004a70 <__sinit>
 80045b4:	ab05      	add	r3, sp, #20
 80045b6:	4620      	mov	r0, r4
 80045b8:	9a04      	ldr	r2, [sp, #16]
 80045ba:	68a1      	ldr	r1, [r4, #8]
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	f000 fc29 	bl	8004e14 <_vfiprintf_r>
 80045c2:	b002      	add	sp, #8
 80045c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c8:	b004      	add	sp, #16
 80045ca:	4770      	bx	lr
 80045cc:	20001000 	.word	0x20001000

080045d0 <_puts_r>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	460e      	mov	r6, r1
 80045d4:	4605      	mov	r5, r0
 80045d6:	b118      	cbz	r0, 80045e0 <_puts_r+0x10>
 80045d8:	6983      	ldr	r3, [r0, #24]
 80045da:	b90b      	cbnz	r3, 80045e0 <_puts_r+0x10>
 80045dc:	f000 fa48 	bl	8004a70 <__sinit>
 80045e0:	69ab      	ldr	r3, [r5, #24]
 80045e2:	68ac      	ldr	r4, [r5, #8]
 80045e4:	b913      	cbnz	r3, 80045ec <_puts_r+0x1c>
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 fa42 	bl	8004a70 <__sinit>
 80045ec:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <_puts_r+0xd0>)
 80045ee:	429c      	cmp	r4, r3
 80045f0:	d120      	bne.n	8004634 <_puts_r+0x64>
 80045f2:	686c      	ldr	r4, [r5, #4]
 80045f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045f6:	07db      	lsls	r3, r3, #31
 80045f8:	d405      	bmi.n	8004606 <_puts_r+0x36>
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	0598      	lsls	r0, r3, #22
 80045fe:	d402      	bmi.n	8004606 <_puts_r+0x36>
 8004600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004602:	f000 fad3 	bl	8004bac <__retarget_lock_acquire_recursive>
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	0719      	lsls	r1, r3, #28
 800460a:	d51d      	bpl.n	8004648 <_puts_r+0x78>
 800460c:	6923      	ldr	r3, [r4, #16]
 800460e:	b1db      	cbz	r3, 8004648 <_puts_r+0x78>
 8004610:	3e01      	subs	r6, #1
 8004612:	68a3      	ldr	r3, [r4, #8]
 8004614:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004618:	3b01      	subs	r3, #1
 800461a:	60a3      	str	r3, [r4, #8]
 800461c:	bb39      	cbnz	r1, 800466e <_puts_r+0x9e>
 800461e:	2b00      	cmp	r3, #0
 8004620:	da38      	bge.n	8004694 <_puts_r+0xc4>
 8004622:	4622      	mov	r2, r4
 8004624:	210a      	movs	r1, #10
 8004626:	4628      	mov	r0, r5
 8004628:	f000 f848 	bl	80046bc <__swbuf_r>
 800462c:	3001      	adds	r0, #1
 800462e:	d011      	beq.n	8004654 <_puts_r+0x84>
 8004630:	250a      	movs	r5, #10
 8004632:	e011      	b.n	8004658 <_puts_r+0x88>
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <_puts_r+0xd4>)
 8004636:	429c      	cmp	r4, r3
 8004638:	d101      	bne.n	800463e <_puts_r+0x6e>
 800463a:	68ac      	ldr	r4, [r5, #8]
 800463c:	e7da      	b.n	80045f4 <_puts_r+0x24>
 800463e:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <_puts_r+0xd8>)
 8004640:	429c      	cmp	r4, r3
 8004642:	bf08      	it	eq
 8004644:	68ec      	ldreq	r4, [r5, #12]
 8004646:	e7d5      	b.n	80045f4 <_puts_r+0x24>
 8004648:	4621      	mov	r1, r4
 800464a:	4628      	mov	r0, r5
 800464c:	f000 f888 	bl	8004760 <__swsetup_r>
 8004650:	2800      	cmp	r0, #0
 8004652:	d0dd      	beq.n	8004610 <_puts_r+0x40>
 8004654:	f04f 35ff 	mov.w	r5, #4294967295
 8004658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800465a:	07da      	lsls	r2, r3, #31
 800465c:	d405      	bmi.n	800466a <_puts_r+0x9a>
 800465e:	89a3      	ldrh	r3, [r4, #12]
 8004660:	059b      	lsls	r3, r3, #22
 8004662:	d402      	bmi.n	800466a <_puts_r+0x9a>
 8004664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004666:	f000 faa2 	bl	8004bae <__retarget_lock_release_recursive>
 800466a:	4628      	mov	r0, r5
 800466c:	bd70      	pop	{r4, r5, r6, pc}
 800466e:	2b00      	cmp	r3, #0
 8004670:	da04      	bge.n	800467c <_puts_r+0xac>
 8004672:	69a2      	ldr	r2, [r4, #24]
 8004674:	429a      	cmp	r2, r3
 8004676:	dc06      	bgt.n	8004686 <_puts_r+0xb6>
 8004678:	290a      	cmp	r1, #10
 800467a:	d004      	beq.n	8004686 <_puts_r+0xb6>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	6022      	str	r2, [r4, #0]
 8004682:	7019      	strb	r1, [r3, #0]
 8004684:	e7c5      	b.n	8004612 <_puts_r+0x42>
 8004686:	4622      	mov	r2, r4
 8004688:	4628      	mov	r0, r5
 800468a:	f000 f817 	bl	80046bc <__swbuf_r>
 800468e:	3001      	adds	r0, #1
 8004690:	d1bf      	bne.n	8004612 <_puts_r+0x42>
 8004692:	e7df      	b.n	8004654 <_puts_r+0x84>
 8004694:	250a      	movs	r5, #10
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	6022      	str	r2, [r4, #0]
 800469c:	701d      	strb	r5, [r3, #0]
 800469e:	e7db      	b.n	8004658 <_puts_r+0x88>
 80046a0:	080055dc 	.word	0x080055dc
 80046a4:	080055fc 	.word	0x080055fc
 80046a8:	080055bc 	.word	0x080055bc

080046ac <puts>:
 80046ac:	4b02      	ldr	r3, [pc, #8]	; (80046b8 <puts+0xc>)
 80046ae:	4601      	mov	r1, r0
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	f7ff bf8d 	b.w	80045d0 <_puts_r>
 80046b6:	bf00      	nop
 80046b8:	20001000 	.word	0x20001000

080046bc <__swbuf_r>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	460e      	mov	r6, r1
 80046c0:	4614      	mov	r4, r2
 80046c2:	4605      	mov	r5, r0
 80046c4:	b118      	cbz	r0, 80046ce <__swbuf_r+0x12>
 80046c6:	6983      	ldr	r3, [r0, #24]
 80046c8:	b90b      	cbnz	r3, 80046ce <__swbuf_r+0x12>
 80046ca:	f000 f9d1 	bl	8004a70 <__sinit>
 80046ce:	4b21      	ldr	r3, [pc, #132]	; (8004754 <__swbuf_r+0x98>)
 80046d0:	429c      	cmp	r4, r3
 80046d2:	d12b      	bne.n	800472c <__swbuf_r+0x70>
 80046d4:	686c      	ldr	r4, [r5, #4]
 80046d6:	69a3      	ldr	r3, [r4, #24]
 80046d8:	60a3      	str	r3, [r4, #8]
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	071a      	lsls	r2, r3, #28
 80046de:	d52f      	bpl.n	8004740 <__swbuf_r+0x84>
 80046e0:	6923      	ldr	r3, [r4, #16]
 80046e2:	b36b      	cbz	r3, 8004740 <__swbuf_r+0x84>
 80046e4:	6923      	ldr	r3, [r4, #16]
 80046e6:	6820      	ldr	r0, [r4, #0]
 80046e8:	b2f6      	uxtb	r6, r6
 80046ea:	1ac0      	subs	r0, r0, r3
 80046ec:	6963      	ldr	r3, [r4, #20]
 80046ee:	4637      	mov	r7, r6
 80046f0:	4283      	cmp	r3, r0
 80046f2:	dc04      	bgt.n	80046fe <__swbuf_r+0x42>
 80046f4:	4621      	mov	r1, r4
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 f926 	bl	8004948 <_fflush_r>
 80046fc:	bb30      	cbnz	r0, 800474c <__swbuf_r+0x90>
 80046fe:	68a3      	ldr	r3, [r4, #8]
 8004700:	3001      	adds	r0, #1
 8004702:	3b01      	subs	r3, #1
 8004704:	60a3      	str	r3, [r4, #8]
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	6022      	str	r2, [r4, #0]
 800470c:	701e      	strb	r6, [r3, #0]
 800470e:	6963      	ldr	r3, [r4, #20]
 8004710:	4283      	cmp	r3, r0
 8004712:	d004      	beq.n	800471e <__swbuf_r+0x62>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	07db      	lsls	r3, r3, #31
 8004718:	d506      	bpl.n	8004728 <__swbuf_r+0x6c>
 800471a:	2e0a      	cmp	r6, #10
 800471c:	d104      	bne.n	8004728 <__swbuf_r+0x6c>
 800471e:	4621      	mov	r1, r4
 8004720:	4628      	mov	r0, r5
 8004722:	f000 f911 	bl	8004948 <_fflush_r>
 8004726:	b988      	cbnz	r0, 800474c <__swbuf_r+0x90>
 8004728:	4638      	mov	r0, r7
 800472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <__swbuf_r+0x9c>)
 800472e:	429c      	cmp	r4, r3
 8004730:	d101      	bne.n	8004736 <__swbuf_r+0x7a>
 8004732:	68ac      	ldr	r4, [r5, #8]
 8004734:	e7cf      	b.n	80046d6 <__swbuf_r+0x1a>
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <__swbuf_r+0xa0>)
 8004738:	429c      	cmp	r4, r3
 800473a:	bf08      	it	eq
 800473c:	68ec      	ldreq	r4, [r5, #12]
 800473e:	e7ca      	b.n	80046d6 <__swbuf_r+0x1a>
 8004740:	4621      	mov	r1, r4
 8004742:	4628      	mov	r0, r5
 8004744:	f000 f80c 	bl	8004760 <__swsetup_r>
 8004748:	2800      	cmp	r0, #0
 800474a:	d0cb      	beq.n	80046e4 <__swbuf_r+0x28>
 800474c:	f04f 37ff 	mov.w	r7, #4294967295
 8004750:	e7ea      	b.n	8004728 <__swbuf_r+0x6c>
 8004752:	bf00      	nop
 8004754:	080055dc 	.word	0x080055dc
 8004758:	080055fc 	.word	0x080055fc
 800475c:	080055bc 	.word	0x080055bc

08004760 <__swsetup_r>:
 8004760:	4b32      	ldr	r3, [pc, #200]	; (800482c <__swsetup_r+0xcc>)
 8004762:	b570      	push	{r4, r5, r6, lr}
 8004764:	681d      	ldr	r5, [r3, #0]
 8004766:	4606      	mov	r6, r0
 8004768:	460c      	mov	r4, r1
 800476a:	b125      	cbz	r5, 8004776 <__swsetup_r+0x16>
 800476c:	69ab      	ldr	r3, [r5, #24]
 800476e:	b913      	cbnz	r3, 8004776 <__swsetup_r+0x16>
 8004770:	4628      	mov	r0, r5
 8004772:	f000 f97d 	bl	8004a70 <__sinit>
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <__swsetup_r+0xd0>)
 8004778:	429c      	cmp	r4, r3
 800477a:	d10f      	bne.n	800479c <__swsetup_r+0x3c>
 800477c:	686c      	ldr	r4, [r5, #4]
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004784:	0719      	lsls	r1, r3, #28
 8004786:	d42c      	bmi.n	80047e2 <__swsetup_r+0x82>
 8004788:	06dd      	lsls	r5, r3, #27
 800478a:	d411      	bmi.n	80047b0 <__swsetup_r+0x50>
 800478c:	2309      	movs	r3, #9
 800478e:	6033      	str	r3, [r6, #0]
 8004790:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	81a3      	strh	r3, [r4, #12]
 800479a:	e03e      	b.n	800481a <__swsetup_r+0xba>
 800479c:	4b25      	ldr	r3, [pc, #148]	; (8004834 <__swsetup_r+0xd4>)
 800479e:	429c      	cmp	r4, r3
 80047a0:	d101      	bne.n	80047a6 <__swsetup_r+0x46>
 80047a2:	68ac      	ldr	r4, [r5, #8]
 80047a4:	e7eb      	b.n	800477e <__swsetup_r+0x1e>
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <__swsetup_r+0xd8>)
 80047a8:	429c      	cmp	r4, r3
 80047aa:	bf08      	it	eq
 80047ac:	68ec      	ldreq	r4, [r5, #12]
 80047ae:	e7e6      	b.n	800477e <__swsetup_r+0x1e>
 80047b0:	0758      	lsls	r0, r3, #29
 80047b2:	d512      	bpl.n	80047da <__swsetup_r+0x7a>
 80047b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b6:	b141      	cbz	r1, 80047ca <__swsetup_r+0x6a>
 80047b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047bc:	4299      	cmp	r1, r3
 80047be:	d002      	beq.n	80047c6 <__swsetup_r+0x66>
 80047c0:	4630      	mov	r0, r6
 80047c2:	f000 fa59 	bl	8004c78 <_free_r>
 80047c6:	2300      	movs	r3, #0
 80047c8:	6363      	str	r3, [r4, #52]	; 0x34
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	2300      	movs	r3, #0
 80047d4:	6063      	str	r3, [r4, #4]
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f043 0308 	orr.w	r3, r3, #8
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	b94b      	cbnz	r3, 80047fa <__swsetup_r+0x9a>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f0:	d003      	beq.n	80047fa <__swsetup_r+0x9a>
 80047f2:	4621      	mov	r1, r4
 80047f4:	4630      	mov	r0, r6
 80047f6:	f000 f9ff 	bl	8004bf8 <__smakebuf_r>
 80047fa:	89a0      	ldrh	r0, [r4, #12]
 80047fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004800:	f010 0301 	ands.w	r3, r0, #1
 8004804:	d00a      	beq.n	800481c <__swsetup_r+0xbc>
 8004806:	2300      	movs	r3, #0
 8004808:	60a3      	str	r3, [r4, #8]
 800480a:	6963      	ldr	r3, [r4, #20]
 800480c:	425b      	negs	r3, r3
 800480e:	61a3      	str	r3, [r4, #24]
 8004810:	6923      	ldr	r3, [r4, #16]
 8004812:	b943      	cbnz	r3, 8004826 <__swsetup_r+0xc6>
 8004814:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004818:	d1ba      	bne.n	8004790 <__swsetup_r+0x30>
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	0781      	lsls	r1, r0, #30
 800481e:	bf58      	it	pl
 8004820:	6963      	ldrpl	r3, [r4, #20]
 8004822:	60a3      	str	r3, [r4, #8]
 8004824:	e7f4      	b.n	8004810 <__swsetup_r+0xb0>
 8004826:	2000      	movs	r0, #0
 8004828:	e7f7      	b.n	800481a <__swsetup_r+0xba>
 800482a:	bf00      	nop
 800482c:	20001000 	.word	0x20001000
 8004830:	080055dc 	.word	0x080055dc
 8004834:	080055fc 	.word	0x080055fc
 8004838:	080055bc 	.word	0x080055bc

0800483c <__sflush_r>:
 800483c:	898a      	ldrh	r2, [r1, #12]
 800483e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	4605      	mov	r5, r0
 8004844:	0710      	lsls	r0, r2, #28
 8004846:	460c      	mov	r4, r1
 8004848:	d458      	bmi.n	80048fc <__sflush_r+0xc0>
 800484a:	684b      	ldr	r3, [r1, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	dc05      	bgt.n	800485c <__sflush_r+0x20>
 8004850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	dc02      	bgt.n	800485c <__sflush_r+0x20>
 8004856:	2000      	movs	r0, #0
 8004858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800485c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800485e:	2e00      	cmp	r6, #0
 8004860:	d0f9      	beq.n	8004856 <__sflush_r+0x1a>
 8004862:	2300      	movs	r3, #0
 8004864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004868:	682f      	ldr	r7, [r5, #0]
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	d032      	beq.n	80048d4 <__sflush_r+0x98>
 800486e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	075a      	lsls	r2, r3, #29
 8004874:	d505      	bpl.n	8004882 <__sflush_r+0x46>
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	1ac0      	subs	r0, r0, r3
 800487a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800487c:	b10b      	cbz	r3, 8004882 <__sflush_r+0x46>
 800487e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004880:	1ac0      	subs	r0, r0, r3
 8004882:	2300      	movs	r3, #0
 8004884:	4602      	mov	r2, r0
 8004886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004888:	4628      	mov	r0, r5
 800488a:	6a21      	ldr	r1, [r4, #32]
 800488c:	47b0      	blx	r6
 800488e:	1c43      	adds	r3, r0, #1
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	d106      	bne.n	80048a2 <__sflush_r+0x66>
 8004894:	6829      	ldr	r1, [r5, #0]
 8004896:	291d      	cmp	r1, #29
 8004898:	d82c      	bhi.n	80048f4 <__sflush_r+0xb8>
 800489a:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <__sflush_r+0x108>)
 800489c:	40ca      	lsrs	r2, r1
 800489e:	07d6      	lsls	r6, r2, #31
 80048a0:	d528      	bpl.n	80048f4 <__sflush_r+0xb8>
 80048a2:	2200      	movs	r2, #0
 80048a4:	6062      	str	r2, [r4, #4]
 80048a6:	6922      	ldr	r2, [r4, #16]
 80048a8:	04d9      	lsls	r1, r3, #19
 80048aa:	6022      	str	r2, [r4, #0]
 80048ac:	d504      	bpl.n	80048b8 <__sflush_r+0x7c>
 80048ae:	1c42      	adds	r2, r0, #1
 80048b0:	d101      	bne.n	80048b6 <__sflush_r+0x7a>
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	b903      	cbnz	r3, 80048b8 <__sflush_r+0x7c>
 80048b6:	6560      	str	r0, [r4, #84]	; 0x54
 80048b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ba:	602f      	str	r7, [r5, #0]
 80048bc:	2900      	cmp	r1, #0
 80048be:	d0ca      	beq.n	8004856 <__sflush_r+0x1a>
 80048c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048c4:	4299      	cmp	r1, r3
 80048c6:	d002      	beq.n	80048ce <__sflush_r+0x92>
 80048c8:	4628      	mov	r0, r5
 80048ca:	f000 f9d5 	bl	8004c78 <_free_r>
 80048ce:	2000      	movs	r0, #0
 80048d0:	6360      	str	r0, [r4, #52]	; 0x34
 80048d2:	e7c1      	b.n	8004858 <__sflush_r+0x1c>
 80048d4:	6a21      	ldr	r1, [r4, #32]
 80048d6:	2301      	movs	r3, #1
 80048d8:	4628      	mov	r0, r5
 80048da:	47b0      	blx	r6
 80048dc:	1c41      	adds	r1, r0, #1
 80048de:	d1c7      	bne.n	8004870 <__sflush_r+0x34>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0c4      	beq.n	8004870 <__sflush_r+0x34>
 80048e6:	2b1d      	cmp	r3, #29
 80048e8:	d001      	beq.n	80048ee <__sflush_r+0xb2>
 80048ea:	2b16      	cmp	r3, #22
 80048ec:	d101      	bne.n	80048f2 <__sflush_r+0xb6>
 80048ee:	602f      	str	r7, [r5, #0]
 80048f0:	e7b1      	b.n	8004856 <__sflush_r+0x1a>
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f8:	81a3      	strh	r3, [r4, #12]
 80048fa:	e7ad      	b.n	8004858 <__sflush_r+0x1c>
 80048fc:	690f      	ldr	r7, [r1, #16]
 80048fe:	2f00      	cmp	r7, #0
 8004900:	d0a9      	beq.n	8004856 <__sflush_r+0x1a>
 8004902:	0793      	lsls	r3, r2, #30
 8004904:	bf18      	it	ne
 8004906:	2300      	movne	r3, #0
 8004908:	680e      	ldr	r6, [r1, #0]
 800490a:	bf08      	it	eq
 800490c:	694b      	ldreq	r3, [r1, #20]
 800490e:	eba6 0807 	sub.w	r8, r6, r7
 8004912:	600f      	str	r7, [r1, #0]
 8004914:	608b      	str	r3, [r1, #8]
 8004916:	f1b8 0f00 	cmp.w	r8, #0
 800491a:	dd9c      	ble.n	8004856 <__sflush_r+0x1a>
 800491c:	4643      	mov	r3, r8
 800491e:	463a      	mov	r2, r7
 8004920:	4628      	mov	r0, r5
 8004922:	6a21      	ldr	r1, [r4, #32]
 8004924:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004926:	47b0      	blx	r6
 8004928:	2800      	cmp	r0, #0
 800492a:	dc06      	bgt.n	800493a <__sflush_r+0xfe>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f04f 30ff 	mov.w	r0, #4294967295
 8004932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	e78e      	b.n	8004858 <__sflush_r+0x1c>
 800493a:	4407      	add	r7, r0
 800493c:	eba8 0800 	sub.w	r8, r8, r0
 8004940:	e7e9      	b.n	8004916 <__sflush_r+0xda>
 8004942:	bf00      	nop
 8004944:	20400001 	.word	0x20400001

08004948 <_fflush_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	690b      	ldr	r3, [r1, #16]
 800494c:	4605      	mov	r5, r0
 800494e:	460c      	mov	r4, r1
 8004950:	b913      	cbnz	r3, 8004958 <_fflush_r+0x10>
 8004952:	2500      	movs	r5, #0
 8004954:	4628      	mov	r0, r5
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	b118      	cbz	r0, 8004962 <_fflush_r+0x1a>
 800495a:	6983      	ldr	r3, [r0, #24]
 800495c:	b90b      	cbnz	r3, 8004962 <_fflush_r+0x1a>
 800495e:	f000 f887 	bl	8004a70 <__sinit>
 8004962:	4b14      	ldr	r3, [pc, #80]	; (80049b4 <_fflush_r+0x6c>)
 8004964:	429c      	cmp	r4, r3
 8004966:	d11b      	bne.n	80049a0 <_fflush_r+0x58>
 8004968:	686c      	ldr	r4, [r5, #4]
 800496a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ef      	beq.n	8004952 <_fflush_r+0xa>
 8004972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004974:	07d0      	lsls	r0, r2, #31
 8004976:	d404      	bmi.n	8004982 <_fflush_r+0x3a>
 8004978:	0599      	lsls	r1, r3, #22
 800497a:	d402      	bmi.n	8004982 <_fflush_r+0x3a>
 800497c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800497e:	f000 f915 	bl	8004bac <__retarget_lock_acquire_recursive>
 8004982:	4628      	mov	r0, r5
 8004984:	4621      	mov	r1, r4
 8004986:	f7ff ff59 	bl	800483c <__sflush_r>
 800498a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800498c:	4605      	mov	r5, r0
 800498e:	07da      	lsls	r2, r3, #31
 8004990:	d4e0      	bmi.n	8004954 <_fflush_r+0xc>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	059b      	lsls	r3, r3, #22
 8004996:	d4dd      	bmi.n	8004954 <_fflush_r+0xc>
 8004998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800499a:	f000 f908 	bl	8004bae <__retarget_lock_release_recursive>
 800499e:	e7d9      	b.n	8004954 <_fflush_r+0xc>
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <_fflush_r+0x70>)
 80049a2:	429c      	cmp	r4, r3
 80049a4:	d101      	bne.n	80049aa <_fflush_r+0x62>
 80049a6:	68ac      	ldr	r4, [r5, #8]
 80049a8:	e7df      	b.n	800496a <_fflush_r+0x22>
 80049aa:	4b04      	ldr	r3, [pc, #16]	; (80049bc <_fflush_r+0x74>)
 80049ac:	429c      	cmp	r4, r3
 80049ae:	bf08      	it	eq
 80049b0:	68ec      	ldreq	r4, [r5, #12]
 80049b2:	e7da      	b.n	800496a <_fflush_r+0x22>
 80049b4:	080055dc 	.word	0x080055dc
 80049b8:	080055fc 	.word	0x080055fc
 80049bc:	080055bc 	.word	0x080055bc

080049c0 <std>:
 80049c0:	2300      	movs	r3, #0
 80049c2:	b510      	push	{r4, lr}
 80049c4:	4604      	mov	r4, r0
 80049c6:	e9c0 3300 	strd	r3, r3, [r0]
 80049ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ce:	6083      	str	r3, [r0, #8]
 80049d0:	8181      	strh	r1, [r0, #12]
 80049d2:	6643      	str	r3, [r0, #100]	; 0x64
 80049d4:	81c2      	strh	r2, [r0, #14]
 80049d6:	6183      	str	r3, [r0, #24]
 80049d8:	4619      	mov	r1, r3
 80049da:	2208      	movs	r2, #8
 80049dc:	305c      	adds	r0, #92	; 0x5c
 80049de:	f7ff fdd7 	bl	8004590 <memset>
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <std+0x38>)
 80049e4:	6224      	str	r4, [r4, #32]
 80049e6:	6263      	str	r3, [r4, #36]	; 0x24
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <std+0x3c>)
 80049ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <std+0x40>)
 80049ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049f0:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <std+0x44>)
 80049f2:	6323      	str	r3, [r4, #48]	; 0x30
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	bf00      	nop
 80049f8:	080053c1 	.word	0x080053c1
 80049fc:	080053e3 	.word	0x080053e3
 8004a00:	0800541b 	.word	0x0800541b
 8004a04:	0800543f 	.word	0x0800543f

08004a08 <_cleanup_r>:
 8004a08:	4901      	ldr	r1, [pc, #4]	; (8004a10 <_cleanup_r+0x8>)
 8004a0a:	f000 b8af 	b.w	8004b6c <_fwalk_reent>
 8004a0e:	bf00      	nop
 8004a10:	08004949 	.word	0x08004949

08004a14 <__sfmoreglue>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	2568      	movs	r5, #104	; 0x68
 8004a18:	1e4a      	subs	r2, r1, #1
 8004a1a:	4355      	muls	r5, r2
 8004a1c:	460e      	mov	r6, r1
 8004a1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a22:	f000 f975 	bl	8004d10 <_malloc_r>
 8004a26:	4604      	mov	r4, r0
 8004a28:	b140      	cbz	r0, 8004a3c <__sfmoreglue+0x28>
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	e9c0 1600 	strd	r1, r6, [r0]
 8004a30:	300c      	adds	r0, #12
 8004a32:	60a0      	str	r0, [r4, #8]
 8004a34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a38:	f7ff fdaa 	bl	8004590 <memset>
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}

08004a40 <__sfp_lock_acquire>:
 8004a40:	4801      	ldr	r0, [pc, #4]	; (8004a48 <__sfp_lock_acquire+0x8>)
 8004a42:	f000 b8b3 	b.w	8004bac <__retarget_lock_acquire_recursive>
 8004a46:	bf00      	nop
 8004a48:	20001094 	.word	0x20001094

08004a4c <__sfp_lock_release>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__sfp_lock_release+0x8>)
 8004a4e:	f000 b8ae 	b.w	8004bae <__retarget_lock_release_recursive>
 8004a52:	bf00      	nop
 8004a54:	20001094 	.word	0x20001094

08004a58 <__sinit_lock_acquire>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__sinit_lock_acquire+0x8>)
 8004a5a:	f000 b8a7 	b.w	8004bac <__retarget_lock_acquire_recursive>
 8004a5e:	bf00      	nop
 8004a60:	2000108f 	.word	0x2000108f

08004a64 <__sinit_lock_release>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__sinit_lock_release+0x8>)
 8004a66:	f000 b8a2 	b.w	8004bae <__retarget_lock_release_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	2000108f 	.word	0x2000108f

08004a70 <__sinit>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	4604      	mov	r4, r0
 8004a74:	f7ff fff0 	bl	8004a58 <__sinit_lock_acquire>
 8004a78:	69a3      	ldr	r3, [r4, #24]
 8004a7a:	b11b      	cbz	r3, 8004a84 <__sinit+0x14>
 8004a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a80:	f7ff bff0 	b.w	8004a64 <__sinit_lock_release>
 8004a84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a88:	6523      	str	r3, [r4, #80]	; 0x50
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <__sinit+0x68>)
 8004a8c:	4a13      	ldr	r2, [pc, #76]	; (8004adc <__sinit+0x6c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a92:	42a3      	cmp	r3, r4
 8004a94:	bf08      	it	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bf08      	it	eq
 8004a9c:	61a3      	streq	r3, [r4, #24]
 8004a9e:	f000 f81f 	bl	8004ae0 <__sfp>
 8004aa2:	6060      	str	r0, [r4, #4]
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f000 f81b 	bl	8004ae0 <__sfp>
 8004aaa:	60a0      	str	r0, [r4, #8]
 8004aac:	4620      	mov	r0, r4
 8004aae:	f000 f817 	bl	8004ae0 <__sfp>
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2104      	movs	r1, #4
 8004ab6:	60e0      	str	r0, [r4, #12]
 8004ab8:	6860      	ldr	r0, [r4, #4]
 8004aba:	f7ff ff81 	bl	80049c0 <std>
 8004abe:	2201      	movs	r2, #1
 8004ac0:	2109      	movs	r1, #9
 8004ac2:	68a0      	ldr	r0, [r4, #8]
 8004ac4:	f7ff ff7c 	bl	80049c0 <std>
 8004ac8:	2202      	movs	r2, #2
 8004aca:	2112      	movs	r1, #18
 8004acc:	68e0      	ldr	r0, [r4, #12]
 8004ace:	f7ff ff77 	bl	80049c0 <std>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	61a3      	str	r3, [r4, #24]
 8004ad6:	e7d1      	b.n	8004a7c <__sinit+0xc>
 8004ad8:	080055b8 	.word	0x080055b8
 8004adc:	08004a09 	.word	0x08004a09

08004ae0 <__sfp>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	4607      	mov	r7, r0
 8004ae4:	f7ff ffac 	bl	8004a40 <__sfp_lock_acquire>
 8004ae8:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <__sfp+0x84>)
 8004aea:	681e      	ldr	r6, [r3, #0]
 8004aec:	69b3      	ldr	r3, [r6, #24]
 8004aee:	b913      	cbnz	r3, 8004af6 <__sfp+0x16>
 8004af0:	4630      	mov	r0, r6
 8004af2:	f7ff ffbd 	bl	8004a70 <__sinit>
 8004af6:	3648      	adds	r6, #72	; 0x48
 8004af8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	d503      	bpl.n	8004b08 <__sfp+0x28>
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	b30b      	cbz	r3, 8004b48 <__sfp+0x68>
 8004b04:	6836      	ldr	r6, [r6, #0]
 8004b06:	e7f7      	b.n	8004af8 <__sfp+0x18>
 8004b08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b0c:	b9d5      	cbnz	r5, 8004b44 <__sfp+0x64>
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <__sfp+0x88>)
 8004b10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b14:	60e3      	str	r3, [r4, #12]
 8004b16:	6665      	str	r5, [r4, #100]	; 0x64
 8004b18:	f000 f847 	bl	8004baa <__retarget_lock_init_recursive>
 8004b1c:	f7ff ff96 	bl	8004a4c <__sfp_lock_release>
 8004b20:	2208      	movs	r2, #8
 8004b22:	4629      	mov	r1, r5
 8004b24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b2c:	6025      	str	r5, [r4, #0]
 8004b2e:	61a5      	str	r5, [r4, #24]
 8004b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b34:	f7ff fd2c 	bl	8004590 <memset>
 8004b38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b40:	4620      	mov	r0, r4
 8004b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b44:	3468      	adds	r4, #104	; 0x68
 8004b46:	e7d9      	b.n	8004afc <__sfp+0x1c>
 8004b48:	2104      	movs	r1, #4
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f7ff ff62 	bl	8004a14 <__sfmoreglue>
 8004b50:	4604      	mov	r4, r0
 8004b52:	6030      	str	r0, [r6, #0]
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d1d5      	bne.n	8004b04 <__sfp+0x24>
 8004b58:	f7ff ff78 	bl	8004a4c <__sfp_lock_release>
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	e7ee      	b.n	8004b40 <__sfp+0x60>
 8004b62:	bf00      	nop
 8004b64:	080055b8 	.word	0x080055b8
 8004b68:	ffff0001 	.word	0xffff0001

08004b6c <_fwalk_reent>:
 8004b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b70:	4606      	mov	r6, r0
 8004b72:	4688      	mov	r8, r1
 8004b74:	2700      	movs	r7, #0
 8004b76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8004b82:	d505      	bpl.n	8004b90 <_fwalk_reent+0x24>
 8004b84:	6824      	ldr	r4, [r4, #0]
 8004b86:	2c00      	cmp	r4, #0
 8004b88:	d1f7      	bne.n	8004b7a <_fwalk_reent+0xe>
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b90:	89ab      	ldrh	r3, [r5, #12]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d907      	bls.n	8004ba6 <_fwalk_reent+0x3a>
 8004b96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	d003      	beq.n	8004ba6 <_fwalk_reent+0x3a>
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	47c0      	blx	r8
 8004ba4:	4307      	orrs	r7, r0
 8004ba6:	3568      	adds	r5, #104	; 0x68
 8004ba8:	e7e9      	b.n	8004b7e <_fwalk_reent+0x12>

08004baa <__retarget_lock_init_recursive>:
 8004baa:	4770      	bx	lr

08004bac <__retarget_lock_acquire_recursive>:
 8004bac:	4770      	bx	lr

08004bae <__retarget_lock_release_recursive>:
 8004bae:	4770      	bx	lr

08004bb0 <__swhatbuf_r>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	460e      	mov	r6, r1
 8004bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb8:	4614      	mov	r4, r2
 8004bba:	2900      	cmp	r1, #0
 8004bbc:	461d      	mov	r5, r3
 8004bbe:	b096      	sub	sp, #88	; 0x58
 8004bc0:	da07      	bge.n	8004bd2 <__swhatbuf_r+0x22>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	602b      	str	r3, [r5, #0]
 8004bc6:	89b3      	ldrh	r3, [r6, #12]
 8004bc8:	061a      	lsls	r2, r3, #24
 8004bca:	d410      	bmi.n	8004bee <__swhatbuf_r+0x3e>
 8004bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd0:	e00e      	b.n	8004bf0 <__swhatbuf_r+0x40>
 8004bd2:	466a      	mov	r2, sp
 8004bd4:	f000 fc5a 	bl	800548c <_fstat_r>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	dbf2      	blt.n	8004bc2 <__swhatbuf_r+0x12>
 8004bdc:	9a01      	ldr	r2, [sp, #4]
 8004bde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004be2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004be6:	425a      	negs	r2, r3
 8004be8:	415a      	adcs	r2, r3
 8004bea:	602a      	str	r2, [r5, #0]
 8004bec:	e7ee      	b.n	8004bcc <__swhatbuf_r+0x1c>
 8004bee:	2340      	movs	r3, #64	; 0x40
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	b016      	add	sp, #88	; 0x58
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}

08004bf8 <__smakebuf_r>:
 8004bf8:	898b      	ldrh	r3, [r1, #12]
 8004bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bfc:	079d      	lsls	r5, r3, #30
 8004bfe:	4606      	mov	r6, r0
 8004c00:	460c      	mov	r4, r1
 8004c02:	d507      	bpl.n	8004c14 <__smakebuf_r+0x1c>
 8004c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	6163      	str	r3, [r4, #20]
 8004c10:	b002      	add	sp, #8
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	466a      	mov	r2, sp
 8004c16:	ab01      	add	r3, sp, #4
 8004c18:	f7ff ffca 	bl	8004bb0 <__swhatbuf_r>
 8004c1c:	9900      	ldr	r1, [sp, #0]
 8004c1e:	4605      	mov	r5, r0
 8004c20:	4630      	mov	r0, r6
 8004c22:	f000 f875 	bl	8004d10 <_malloc_r>
 8004c26:	b948      	cbnz	r0, 8004c3c <__smakebuf_r+0x44>
 8004c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c2c:	059a      	lsls	r2, r3, #22
 8004c2e:	d4ef      	bmi.n	8004c10 <__smakebuf_r+0x18>
 8004c30:	f023 0303 	bic.w	r3, r3, #3
 8004c34:	f043 0302 	orr.w	r3, r3, #2
 8004c38:	81a3      	strh	r3, [r4, #12]
 8004c3a:	e7e3      	b.n	8004c04 <__smakebuf_r+0xc>
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <__smakebuf_r+0x7c>)
 8004c3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	6020      	str	r0, [r4, #0]
 8004c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	9b00      	ldr	r3, [sp, #0]
 8004c4c:	6120      	str	r0, [r4, #16]
 8004c4e:	6163      	str	r3, [r4, #20]
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	b15b      	cbz	r3, 8004c6c <__smakebuf_r+0x74>
 8004c54:	4630      	mov	r0, r6
 8004c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c5a:	f000 fc29 	bl	80054b0 <_isatty_r>
 8004c5e:	b128      	cbz	r0, 8004c6c <__smakebuf_r+0x74>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	89a0      	ldrh	r0, [r4, #12]
 8004c6e:	4305      	orrs	r5, r0
 8004c70:	81a5      	strh	r5, [r4, #12]
 8004c72:	e7cd      	b.n	8004c10 <__smakebuf_r+0x18>
 8004c74:	08004a09 	.word	0x08004a09

08004c78 <_free_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	d043      	beq.n	8004d08 <_free_r+0x90>
 8004c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c84:	1f0c      	subs	r4, r1, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bfb8      	it	lt
 8004c8a:	18e4      	addlt	r4, r4, r3
 8004c8c:	f000 fc40 	bl	8005510 <__malloc_lock>
 8004c90:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <_free_r+0x94>)
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	4610      	mov	r0, r2
 8004c96:	b933      	cbnz	r3, 8004ca6 <_free_r+0x2e>
 8004c98:	6063      	str	r3, [r4, #4]
 8004c9a:	6014      	str	r4, [r2, #0]
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ca2:	f000 bc3b 	b.w	800551c <__malloc_unlock>
 8004ca6:	42a3      	cmp	r3, r4
 8004ca8:	d90a      	bls.n	8004cc0 <_free_r+0x48>
 8004caa:	6821      	ldr	r1, [r4, #0]
 8004cac:	1862      	adds	r2, r4, r1
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	bf01      	itttt	eq
 8004cb2:	681a      	ldreq	r2, [r3, #0]
 8004cb4:	685b      	ldreq	r3, [r3, #4]
 8004cb6:	1852      	addeq	r2, r2, r1
 8004cb8:	6022      	streq	r2, [r4, #0]
 8004cba:	6063      	str	r3, [r4, #4]
 8004cbc:	6004      	str	r4, [r0, #0]
 8004cbe:	e7ed      	b.n	8004c9c <_free_r+0x24>
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	b10b      	cbz	r3, 8004cca <_free_r+0x52>
 8004cc6:	42a3      	cmp	r3, r4
 8004cc8:	d9fa      	bls.n	8004cc0 <_free_r+0x48>
 8004cca:	6811      	ldr	r1, [r2, #0]
 8004ccc:	1850      	adds	r0, r2, r1
 8004cce:	42a0      	cmp	r0, r4
 8004cd0:	d10b      	bne.n	8004cea <_free_r+0x72>
 8004cd2:	6820      	ldr	r0, [r4, #0]
 8004cd4:	4401      	add	r1, r0
 8004cd6:	1850      	adds	r0, r2, r1
 8004cd8:	4283      	cmp	r3, r0
 8004cda:	6011      	str	r1, [r2, #0]
 8004cdc:	d1de      	bne.n	8004c9c <_free_r+0x24>
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4401      	add	r1, r0
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	6053      	str	r3, [r2, #4]
 8004ce8:	e7d8      	b.n	8004c9c <_free_r+0x24>
 8004cea:	d902      	bls.n	8004cf2 <_free_r+0x7a>
 8004cec:	230c      	movs	r3, #12
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	e7d4      	b.n	8004c9c <_free_r+0x24>
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	1821      	adds	r1, r4, r0
 8004cf6:	428b      	cmp	r3, r1
 8004cf8:	bf01      	itttt	eq
 8004cfa:	6819      	ldreq	r1, [r3, #0]
 8004cfc:	685b      	ldreq	r3, [r3, #4]
 8004cfe:	1809      	addeq	r1, r1, r0
 8004d00:	6021      	streq	r1, [r4, #0]
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	6054      	str	r4, [r2, #4]
 8004d06:	e7c9      	b.n	8004c9c <_free_r+0x24>
 8004d08:	bd38      	pop	{r3, r4, r5, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20001084 	.word	0x20001084

08004d10 <_malloc_r>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	1ccd      	adds	r5, r1, #3
 8004d14:	f025 0503 	bic.w	r5, r5, #3
 8004d18:	3508      	adds	r5, #8
 8004d1a:	2d0c      	cmp	r5, #12
 8004d1c:	bf38      	it	cc
 8004d1e:	250c      	movcc	r5, #12
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	4606      	mov	r6, r0
 8004d24:	db01      	blt.n	8004d2a <_malloc_r+0x1a>
 8004d26:	42a9      	cmp	r1, r5
 8004d28:	d903      	bls.n	8004d32 <_malloc_r+0x22>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	6033      	str	r3, [r6, #0]
 8004d2e:	2000      	movs	r0, #0
 8004d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d32:	f000 fbed 	bl	8005510 <__malloc_lock>
 8004d36:	4921      	ldr	r1, [pc, #132]	; (8004dbc <_malloc_r+0xac>)
 8004d38:	680a      	ldr	r2, [r1, #0]
 8004d3a:	4614      	mov	r4, r2
 8004d3c:	b99c      	cbnz	r4, 8004d66 <_malloc_r+0x56>
 8004d3e:	4f20      	ldr	r7, [pc, #128]	; (8004dc0 <_malloc_r+0xb0>)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	b923      	cbnz	r3, 8004d4e <_malloc_r+0x3e>
 8004d44:	4621      	mov	r1, r4
 8004d46:	4630      	mov	r0, r6
 8004d48:	f000 fb2a 	bl	80053a0 <_sbrk_r>
 8004d4c:	6038      	str	r0, [r7, #0]
 8004d4e:	4629      	mov	r1, r5
 8004d50:	4630      	mov	r0, r6
 8004d52:	f000 fb25 	bl	80053a0 <_sbrk_r>
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	d123      	bne.n	8004da2 <_malloc_r+0x92>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	6033      	str	r3, [r6, #0]
 8004d60:	f000 fbdc 	bl	800551c <__malloc_unlock>
 8004d64:	e7e3      	b.n	8004d2e <_malloc_r+0x1e>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	1b5b      	subs	r3, r3, r5
 8004d6a:	d417      	bmi.n	8004d9c <_malloc_r+0x8c>
 8004d6c:	2b0b      	cmp	r3, #11
 8004d6e:	d903      	bls.n	8004d78 <_malloc_r+0x68>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	441c      	add	r4, r3
 8004d74:	6025      	str	r5, [r4, #0]
 8004d76:	e004      	b.n	8004d82 <_malloc_r+0x72>
 8004d78:	6863      	ldr	r3, [r4, #4]
 8004d7a:	42a2      	cmp	r2, r4
 8004d7c:	bf0c      	ite	eq
 8004d7e:	600b      	streq	r3, [r1, #0]
 8004d80:	6053      	strne	r3, [r2, #4]
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 fbca 	bl	800551c <__malloc_unlock>
 8004d88:	f104 000b 	add.w	r0, r4, #11
 8004d8c:	1d23      	adds	r3, r4, #4
 8004d8e:	f020 0007 	bic.w	r0, r0, #7
 8004d92:	1ac2      	subs	r2, r0, r3
 8004d94:	d0cc      	beq.n	8004d30 <_malloc_r+0x20>
 8004d96:	1a1b      	subs	r3, r3, r0
 8004d98:	50a3      	str	r3, [r4, r2]
 8004d9a:	e7c9      	b.n	8004d30 <_malloc_r+0x20>
 8004d9c:	4622      	mov	r2, r4
 8004d9e:	6864      	ldr	r4, [r4, #4]
 8004da0:	e7cc      	b.n	8004d3c <_malloc_r+0x2c>
 8004da2:	1cc4      	adds	r4, r0, #3
 8004da4:	f024 0403 	bic.w	r4, r4, #3
 8004da8:	42a0      	cmp	r0, r4
 8004daa:	d0e3      	beq.n	8004d74 <_malloc_r+0x64>
 8004dac:	1a21      	subs	r1, r4, r0
 8004dae:	4630      	mov	r0, r6
 8004db0:	f000 faf6 	bl	80053a0 <_sbrk_r>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d1dd      	bne.n	8004d74 <_malloc_r+0x64>
 8004db8:	e7cf      	b.n	8004d5a <_malloc_r+0x4a>
 8004dba:	bf00      	nop
 8004dbc:	20001084 	.word	0x20001084
 8004dc0:	20001088 	.word	0x20001088

08004dc4 <__sfputc_r>:
 8004dc4:	6893      	ldr	r3, [r2, #8]
 8004dc6:	b410      	push	{r4}
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	6093      	str	r3, [r2, #8]
 8004dce:	da07      	bge.n	8004de0 <__sfputc_r+0x1c>
 8004dd0:	6994      	ldr	r4, [r2, #24]
 8004dd2:	42a3      	cmp	r3, r4
 8004dd4:	db01      	blt.n	8004dda <__sfputc_r+0x16>
 8004dd6:	290a      	cmp	r1, #10
 8004dd8:	d102      	bne.n	8004de0 <__sfputc_r+0x1c>
 8004dda:	bc10      	pop	{r4}
 8004ddc:	f7ff bc6e 	b.w	80046bc <__swbuf_r>
 8004de0:	6813      	ldr	r3, [r2, #0]
 8004de2:	1c58      	adds	r0, r3, #1
 8004de4:	6010      	str	r0, [r2, #0]
 8004de6:	7019      	strb	r1, [r3, #0]
 8004de8:	4608      	mov	r0, r1
 8004dea:	bc10      	pop	{r4}
 8004dec:	4770      	bx	lr

08004dee <__sfputs_r>:
 8004dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df0:	4606      	mov	r6, r0
 8004df2:	460f      	mov	r7, r1
 8004df4:	4614      	mov	r4, r2
 8004df6:	18d5      	adds	r5, r2, r3
 8004df8:	42ac      	cmp	r4, r5
 8004dfa:	d101      	bne.n	8004e00 <__sfputs_r+0x12>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	e007      	b.n	8004e10 <__sfputs_r+0x22>
 8004e00:	463a      	mov	r2, r7
 8004e02:	4630      	mov	r0, r6
 8004e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e08:	f7ff ffdc 	bl	8004dc4 <__sfputc_r>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d1f3      	bne.n	8004df8 <__sfputs_r+0xa>
 8004e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e14 <_vfiprintf_r>:
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	460d      	mov	r5, r1
 8004e1a:	4614      	mov	r4, r2
 8004e1c:	4698      	mov	r8, r3
 8004e1e:	4606      	mov	r6, r0
 8004e20:	b09d      	sub	sp, #116	; 0x74
 8004e22:	b118      	cbz	r0, 8004e2c <_vfiprintf_r+0x18>
 8004e24:	6983      	ldr	r3, [r0, #24]
 8004e26:	b90b      	cbnz	r3, 8004e2c <_vfiprintf_r+0x18>
 8004e28:	f7ff fe22 	bl	8004a70 <__sinit>
 8004e2c:	4b89      	ldr	r3, [pc, #548]	; (8005054 <_vfiprintf_r+0x240>)
 8004e2e:	429d      	cmp	r5, r3
 8004e30:	d11b      	bne.n	8004e6a <_vfiprintf_r+0x56>
 8004e32:	6875      	ldr	r5, [r6, #4]
 8004e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e36:	07d9      	lsls	r1, r3, #31
 8004e38:	d405      	bmi.n	8004e46 <_vfiprintf_r+0x32>
 8004e3a:	89ab      	ldrh	r3, [r5, #12]
 8004e3c:	059a      	lsls	r2, r3, #22
 8004e3e:	d402      	bmi.n	8004e46 <_vfiprintf_r+0x32>
 8004e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e42:	f7ff feb3 	bl	8004bac <__retarget_lock_acquire_recursive>
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	071b      	lsls	r3, r3, #28
 8004e4a:	d501      	bpl.n	8004e50 <_vfiprintf_r+0x3c>
 8004e4c:	692b      	ldr	r3, [r5, #16]
 8004e4e:	b9eb      	cbnz	r3, 8004e8c <_vfiprintf_r+0x78>
 8004e50:	4629      	mov	r1, r5
 8004e52:	4630      	mov	r0, r6
 8004e54:	f7ff fc84 	bl	8004760 <__swsetup_r>
 8004e58:	b1c0      	cbz	r0, 8004e8c <_vfiprintf_r+0x78>
 8004e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e5c:	07dc      	lsls	r4, r3, #31
 8004e5e:	d50e      	bpl.n	8004e7e <_vfiprintf_r+0x6a>
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	b01d      	add	sp, #116	; 0x74
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6a:	4b7b      	ldr	r3, [pc, #492]	; (8005058 <_vfiprintf_r+0x244>)
 8004e6c:	429d      	cmp	r5, r3
 8004e6e:	d101      	bne.n	8004e74 <_vfiprintf_r+0x60>
 8004e70:	68b5      	ldr	r5, [r6, #8]
 8004e72:	e7df      	b.n	8004e34 <_vfiprintf_r+0x20>
 8004e74:	4b79      	ldr	r3, [pc, #484]	; (800505c <_vfiprintf_r+0x248>)
 8004e76:	429d      	cmp	r5, r3
 8004e78:	bf08      	it	eq
 8004e7a:	68f5      	ldreq	r5, [r6, #12]
 8004e7c:	e7da      	b.n	8004e34 <_vfiprintf_r+0x20>
 8004e7e:	89ab      	ldrh	r3, [r5, #12]
 8004e80:	0598      	lsls	r0, r3, #22
 8004e82:	d4ed      	bmi.n	8004e60 <_vfiprintf_r+0x4c>
 8004e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e86:	f7ff fe92 	bl	8004bae <__retarget_lock_release_recursive>
 8004e8a:	e7e9      	b.n	8004e60 <_vfiprintf_r+0x4c>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e90:	2320      	movs	r3, #32
 8004e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e96:	2330      	movs	r3, #48	; 0x30
 8004e98:	f04f 0901 	mov.w	r9, #1
 8004e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005060 <_vfiprintf_r+0x24c>
 8004ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ea8:	4623      	mov	r3, r4
 8004eaa:	469a      	mov	sl, r3
 8004eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb0:	b10a      	cbz	r2, 8004eb6 <_vfiprintf_r+0xa2>
 8004eb2:	2a25      	cmp	r2, #37	; 0x25
 8004eb4:	d1f9      	bne.n	8004eaa <_vfiprintf_r+0x96>
 8004eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8004eba:	d00b      	beq.n	8004ed4 <_vfiprintf_r+0xc0>
 8004ebc:	465b      	mov	r3, fp
 8004ebe:	4622      	mov	r2, r4
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f7ff ff93 	bl	8004dee <__sfputs_r>
 8004ec8:	3001      	adds	r0, #1
 8004eca:	f000 80aa 	beq.w	8005022 <_vfiprintf_r+0x20e>
 8004ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ed0:	445a      	add	r2, fp
 8004ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80a2 	beq.w	8005022 <_vfiprintf_r+0x20e>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ee8:	f10a 0a01 	add.w	sl, sl, #1
 8004eec:	9304      	str	r3, [sp, #16]
 8004eee:	9307      	str	r3, [sp, #28]
 8004ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ef6:	4654      	mov	r4, sl
 8004ef8:	2205      	movs	r2, #5
 8004efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004efe:	4858      	ldr	r0, [pc, #352]	; (8005060 <_vfiprintf_r+0x24c>)
 8004f00:	f000 faf8 	bl	80054f4 <memchr>
 8004f04:	9a04      	ldr	r2, [sp, #16]
 8004f06:	b9d8      	cbnz	r0, 8004f40 <_vfiprintf_r+0x12c>
 8004f08:	06d1      	lsls	r1, r2, #27
 8004f0a:	bf44      	itt	mi
 8004f0c:	2320      	movmi	r3, #32
 8004f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f12:	0713      	lsls	r3, r2, #28
 8004f14:	bf44      	itt	mi
 8004f16:	232b      	movmi	r3, #43	; 0x2b
 8004f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f20:	2b2a      	cmp	r3, #42	; 0x2a
 8004f22:	d015      	beq.n	8004f50 <_vfiprintf_r+0x13c>
 8004f24:	4654      	mov	r4, sl
 8004f26:	2000      	movs	r0, #0
 8004f28:	f04f 0c0a 	mov.w	ip, #10
 8004f2c:	9a07      	ldr	r2, [sp, #28]
 8004f2e:	4621      	mov	r1, r4
 8004f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f34:	3b30      	subs	r3, #48	; 0x30
 8004f36:	2b09      	cmp	r3, #9
 8004f38:	d94e      	bls.n	8004fd8 <_vfiprintf_r+0x1c4>
 8004f3a:	b1b0      	cbz	r0, 8004f6a <_vfiprintf_r+0x156>
 8004f3c:	9207      	str	r2, [sp, #28]
 8004f3e:	e014      	b.n	8004f6a <_vfiprintf_r+0x156>
 8004f40:	eba0 0308 	sub.w	r3, r0, r8
 8004f44:	fa09 f303 	lsl.w	r3, r9, r3
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	46a2      	mov	sl, r4
 8004f4c:	9304      	str	r3, [sp, #16]
 8004f4e:	e7d2      	b.n	8004ef6 <_vfiprintf_r+0xe2>
 8004f50:	9b03      	ldr	r3, [sp, #12]
 8004f52:	1d19      	adds	r1, r3, #4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	9103      	str	r1, [sp, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bfbb      	ittet	lt
 8004f5c:	425b      	neglt	r3, r3
 8004f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8004f62:	9307      	strge	r3, [sp, #28]
 8004f64:	9307      	strlt	r3, [sp, #28]
 8004f66:	bfb8      	it	lt
 8004f68:	9204      	strlt	r2, [sp, #16]
 8004f6a:	7823      	ldrb	r3, [r4, #0]
 8004f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f6e:	d10c      	bne.n	8004f8a <_vfiprintf_r+0x176>
 8004f70:	7863      	ldrb	r3, [r4, #1]
 8004f72:	2b2a      	cmp	r3, #42	; 0x2a
 8004f74:	d135      	bne.n	8004fe2 <_vfiprintf_r+0x1ce>
 8004f76:	9b03      	ldr	r3, [sp, #12]
 8004f78:	3402      	adds	r4, #2
 8004f7a:	1d1a      	adds	r2, r3, #4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	9203      	str	r2, [sp, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bfb8      	it	lt
 8004f84:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f88:	9305      	str	r3, [sp, #20]
 8004f8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005070 <_vfiprintf_r+0x25c>
 8004f8e:	2203      	movs	r2, #3
 8004f90:	4650      	mov	r0, sl
 8004f92:	7821      	ldrb	r1, [r4, #0]
 8004f94:	f000 faae 	bl	80054f4 <memchr>
 8004f98:	b140      	cbz	r0, 8004fac <_vfiprintf_r+0x198>
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	eba0 000a 	sub.w	r0, r0, sl
 8004fa0:	fa03 f000 	lsl.w	r0, r3, r0
 8004fa4:	9b04      	ldr	r3, [sp, #16]
 8004fa6:	3401      	adds	r4, #1
 8004fa8:	4303      	orrs	r3, r0
 8004faa:	9304      	str	r3, [sp, #16]
 8004fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb0:	2206      	movs	r2, #6
 8004fb2:	482c      	ldr	r0, [pc, #176]	; (8005064 <_vfiprintf_r+0x250>)
 8004fb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fb8:	f000 fa9c 	bl	80054f4 <memchr>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d03f      	beq.n	8005040 <_vfiprintf_r+0x22c>
 8004fc0:	4b29      	ldr	r3, [pc, #164]	; (8005068 <_vfiprintf_r+0x254>)
 8004fc2:	bb1b      	cbnz	r3, 800500c <_vfiprintf_r+0x1f8>
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	3307      	adds	r3, #7
 8004fc8:	f023 0307 	bic.w	r3, r3, #7
 8004fcc:	3308      	adds	r3, #8
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd2:	443b      	add	r3, r7
 8004fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd6:	e767      	b.n	8004ea8 <_vfiprintf_r+0x94>
 8004fd8:	460c      	mov	r4, r1
 8004fda:	2001      	movs	r0, #1
 8004fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fe0:	e7a5      	b.n	8004f2e <_vfiprintf_r+0x11a>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f04f 0c0a 	mov.w	ip, #10
 8004fe8:	4619      	mov	r1, r3
 8004fea:	3401      	adds	r4, #1
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff4:	3a30      	subs	r2, #48	; 0x30
 8004ff6:	2a09      	cmp	r2, #9
 8004ff8:	d903      	bls.n	8005002 <_vfiprintf_r+0x1ee>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0c5      	beq.n	8004f8a <_vfiprintf_r+0x176>
 8004ffe:	9105      	str	r1, [sp, #20]
 8005000:	e7c3      	b.n	8004f8a <_vfiprintf_r+0x176>
 8005002:	4604      	mov	r4, r0
 8005004:	2301      	movs	r3, #1
 8005006:	fb0c 2101 	mla	r1, ip, r1, r2
 800500a:	e7f0      	b.n	8004fee <_vfiprintf_r+0x1da>
 800500c:	ab03      	add	r3, sp, #12
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	462a      	mov	r2, r5
 8005012:	4630      	mov	r0, r6
 8005014:	4b15      	ldr	r3, [pc, #84]	; (800506c <_vfiprintf_r+0x258>)
 8005016:	a904      	add	r1, sp, #16
 8005018:	f3af 8000 	nop.w
 800501c:	4607      	mov	r7, r0
 800501e:	1c78      	adds	r0, r7, #1
 8005020:	d1d6      	bne.n	8004fd0 <_vfiprintf_r+0x1bc>
 8005022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005024:	07d9      	lsls	r1, r3, #31
 8005026:	d405      	bmi.n	8005034 <_vfiprintf_r+0x220>
 8005028:	89ab      	ldrh	r3, [r5, #12]
 800502a:	059a      	lsls	r2, r3, #22
 800502c:	d402      	bmi.n	8005034 <_vfiprintf_r+0x220>
 800502e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005030:	f7ff fdbd 	bl	8004bae <__retarget_lock_release_recursive>
 8005034:	89ab      	ldrh	r3, [r5, #12]
 8005036:	065b      	lsls	r3, r3, #25
 8005038:	f53f af12 	bmi.w	8004e60 <_vfiprintf_r+0x4c>
 800503c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800503e:	e711      	b.n	8004e64 <_vfiprintf_r+0x50>
 8005040:	ab03      	add	r3, sp, #12
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	462a      	mov	r2, r5
 8005046:	4630      	mov	r0, r6
 8005048:	4b08      	ldr	r3, [pc, #32]	; (800506c <_vfiprintf_r+0x258>)
 800504a:	a904      	add	r1, sp, #16
 800504c:	f000 f882 	bl	8005154 <_printf_i>
 8005050:	e7e4      	b.n	800501c <_vfiprintf_r+0x208>
 8005052:	bf00      	nop
 8005054:	080055dc 	.word	0x080055dc
 8005058:	080055fc 	.word	0x080055fc
 800505c:	080055bc 	.word	0x080055bc
 8005060:	0800561c 	.word	0x0800561c
 8005064:	08005626 	.word	0x08005626
 8005068:	00000000 	.word	0x00000000
 800506c:	08004def 	.word	0x08004def
 8005070:	08005622 	.word	0x08005622

08005074 <_printf_common>:
 8005074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	4616      	mov	r6, r2
 800507a:	4699      	mov	r9, r3
 800507c:	688a      	ldr	r2, [r1, #8]
 800507e:	690b      	ldr	r3, [r1, #16]
 8005080:	4607      	mov	r7, r0
 8005082:	4293      	cmp	r3, r2
 8005084:	bfb8      	it	lt
 8005086:	4613      	movlt	r3, r2
 8005088:	6033      	str	r3, [r6, #0]
 800508a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800508e:	460c      	mov	r4, r1
 8005090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005094:	b10a      	cbz	r2, 800509a <_printf_common+0x26>
 8005096:	3301      	adds	r3, #1
 8005098:	6033      	str	r3, [r6, #0]
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	0699      	lsls	r1, r3, #26
 800509e:	bf42      	ittt	mi
 80050a0:	6833      	ldrmi	r3, [r6, #0]
 80050a2:	3302      	addmi	r3, #2
 80050a4:	6033      	strmi	r3, [r6, #0]
 80050a6:	6825      	ldr	r5, [r4, #0]
 80050a8:	f015 0506 	ands.w	r5, r5, #6
 80050ac:	d106      	bne.n	80050bc <_printf_common+0x48>
 80050ae:	f104 0a19 	add.w	sl, r4, #25
 80050b2:	68e3      	ldr	r3, [r4, #12]
 80050b4:	6832      	ldr	r2, [r6, #0]
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	42ab      	cmp	r3, r5
 80050ba:	dc28      	bgt.n	800510e <_printf_common+0x9a>
 80050bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050c0:	1e13      	subs	r3, r2, #0
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	bf18      	it	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	0692      	lsls	r2, r2, #26
 80050ca:	d42d      	bmi.n	8005128 <_printf_common+0xb4>
 80050cc:	4649      	mov	r1, r9
 80050ce:	4638      	mov	r0, r7
 80050d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050d4:	47c0      	blx	r8
 80050d6:	3001      	adds	r0, #1
 80050d8:	d020      	beq.n	800511c <_printf_common+0xa8>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	68e5      	ldr	r5, [r4, #12]
 80050de:	f003 0306 	and.w	r3, r3, #6
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	bf18      	it	ne
 80050e6:	2500      	movne	r5, #0
 80050e8:	6832      	ldr	r2, [r6, #0]
 80050ea:	f04f 0600 	mov.w	r6, #0
 80050ee:	68a3      	ldr	r3, [r4, #8]
 80050f0:	bf08      	it	eq
 80050f2:	1aad      	subeq	r5, r5, r2
 80050f4:	6922      	ldr	r2, [r4, #16]
 80050f6:	bf08      	it	eq
 80050f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050fc:	4293      	cmp	r3, r2
 80050fe:	bfc4      	itt	gt
 8005100:	1a9b      	subgt	r3, r3, r2
 8005102:	18ed      	addgt	r5, r5, r3
 8005104:	341a      	adds	r4, #26
 8005106:	42b5      	cmp	r5, r6
 8005108:	d11a      	bne.n	8005140 <_printf_common+0xcc>
 800510a:	2000      	movs	r0, #0
 800510c:	e008      	b.n	8005120 <_printf_common+0xac>
 800510e:	2301      	movs	r3, #1
 8005110:	4652      	mov	r2, sl
 8005112:	4649      	mov	r1, r9
 8005114:	4638      	mov	r0, r7
 8005116:	47c0      	blx	r8
 8005118:	3001      	adds	r0, #1
 800511a:	d103      	bne.n	8005124 <_printf_common+0xb0>
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005124:	3501      	adds	r5, #1
 8005126:	e7c4      	b.n	80050b2 <_printf_common+0x3e>
 8005128:	2030      	movs	r0, #48	; 0x30
 800512a:	18e1      	adds	r1, r4, r3
 800512c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005136:	4422      	add	r2, r4
 8005138:	3302      	adds	r3, #2
 800513a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800513e:	e7c5      	b.n	80050cc <_printf_common+0x58>
 8005140:	2301      	movs	r3, #1
 8005142:	4622      	mov	r2, r4
 8005144:	4649      	mov	r1, r9
 8005146:	4638      	mov	r0, r7
 8005148:	47c0      	blx	r8
 800514a:	3001      	adds	r0, #1
 800514c:	d0e6      	beq.n	800511c <_printf_common+0xa8>
 800514e:	3601      	adds	r6, #1
 8005150:	e7d9      	b.n	8005106 <_printf_common+0x92>
	...

08005154 <_printf_i>:
 8005154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005158:	460c      	mov	r4, r1
 800515a:	7e27      	ldrb	r7, [r4, #24]
 800515c:	4691      	mov	r9, r2
 800515e:	2f78      	cmp	r7, #120	; 0x78
 8005160:	4680      	mov	r8, r0
 8005162:	469a      	mov	sl, r3
 8005164:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005166:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800516a:	d807      	bhi.n	800517c <_printf_i+0x28>
 800516c:	2f62      	cmp	r7, #98	; 0x62
 800516e:	d80a      	bhi.n	8005186 <_printf_i+0x32>
 8005170:	2f00      	cmp	r7, #0
 8005172:	f000 80d9 	beq.w	8005328 <_printf_i+0x1d4>
 8005176:	2f58      	cmp	r7, #88	; 0x58
 8005178:	f000 80a4 	beq.w	80052c4 <_printf_i+0x170>
 800517c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005184:	e03a      	b.n	80051fc <_printf_i+0xa8>
 8005186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800518a:	2b15      	cmp	r3, #21
 800518c:	d8f6      	bhi.n	800517c <_printf_i+0x28>
 800518e:	a001      	add	r0, pc, #4	; (adr r0, 8005194 <_printf_i+0x40>)
 8005190:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005194:	080051ed 	.word	0x080051ed
 8005198:	08005201 	.word	0x08005201
 800519c:	0800517d 	.word	0x0800517d
 80051a0:	0800517d 	.word	0x0800517d
 80051a4:	0800517d 	.word	0x0800517d
 80051a8:	0800517d 	.word	0x0800517d
 80051ac:	08005201 	.word	0x08005201
 80051b0:	0800517d 	.word	0x0800517d
 80051b4:	0800517d 	.word	0x0800517d
 80051b8:	0800517d 	.word	0x0800517d
 80051bc:	0800517d 	.word	0x0800517d
 80051c0:	0800530f 	.word	0x0800530f
 80051c4:	08005231 	.word	0x08005231
 80051c8:	080052f1 	.word	0x080052f1
 80051cc:	0800517d 	.word	0x0800517d
 80051d0:	0800517d 	.word	0x0800517d
 80051d4:	08005331 	.word	0x08005331
 80051d8:	0800517d 	.word	0x0800517d
 80051dc:	08005231 	.word	0x08005231
 80051e0:	0800517d 	.word	0x0800517d
 80051e4:	0800517d 	.word	0x0800517d
 80051e8:	080052f9 	.word	0x080052f9
 80051ec:	680b      	ldr	r3, [r1, #0]
 80051ee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051f2:	1d1a      	adds	r2, r3, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	600a      	str	r2, [r1, #0]
 80051f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0a4      	b.n	800534a <_printf_i+0x1f6>
 8005200:	6825      	ldr	r5, [r4, #0]
 8005202:	6808      	ldr	r0, [r1, #0]
 8005204:	062e      	lsls	r6, r5, #24
 8005206:	f100 0304 	add.w	r3, r0, #4
 800520a:	d50a      	bpl.n	8005222 <_printf_i+0xce>
 800520c:	6805      	ldr	r5, [r0, #0]
 800520e:	600b      	str	r3, [r1, #0]
 8005210:	2d00      	cmp	r5, #0
 8005212:	da03      	bge.n	800521c <_printf_i+0xc8>
 8005214:	232d      	movs	r3, #45	; 0x2d
 8005216:	426d      	negs	r5, r5
 8005218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800521c:	230a      	movs	r3, #10
 800521e:	485e      	ldr	r0, [pc, #376]	; (8005398 <_printf_i+0x244>)
 8005220:	e019      	b.n	8005256 <_printf_i+0x102>
 8005222:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005226:	6805      	ldr	r5, [r0, #0]
 8005228:	600b      	str	r3, [r1, #0]
 800522a:	bf18      	it	ne
 800522c:	b22d      	sxthne	r5, r5
 800522e:	e7ef      	b.n	8005210 <_printf_i+0xbc>
 8005230:	680b      	ldr	r3, [r1, #0]
 8005232:	6825      	ldr	r5, [r4, #0]
 8005234:	1d18      	adds	r0, r3, #4
 8005236:	6008      	str	r0, [r1, #0]
 8005238:	0628      	lsls	r0, r5, #24
 800523a:	d501      	bpl.n	8005240 <_printf_i+0xec>
 800523c:	681d      	ldr	r5, [r3, #0]
 800523e:	e002      	b.n	8005246 <_printf_i+0xf2>
 8005240:	0669      	lsls	r1, r5, #25
 8005242:	d5fb      	bpl.n	800523c <_printf_i+0xe8>
 8005244:	881d      	ldrh	r5, [r3, #0]
 8005246:	2f6f      	cmp	r7, #111	; 0x6f
 8005248:	bf0c      	ite	eq
 800524a:	2308      	moveq	r3, #8
 800524c:	230a      	movne	r3, #10
 800524e:	4852      	ldr	r0, [pc, #328]	; (8005398 <_printf_i+0x244>)
 8005250:	2100      	movs	r1, #0
 8005252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005256:	6866      	ldr	r6, [r4, #4]
 8005258:	2e00      	cmp	r6, #0
 800525a:	bfa8      	it	ge
 800525c:	6821      	ldrge	r1, [r4, #0]
 800525e:	60a6      	str	r6, [r4, #8]
 8005260:	bfa4      	itt	ge
 8005262:	f021 0104 	bicge.w	r1, r1, #4
 8005266:	6021      	strge	r1, [r4, #0]
 8005268:	b90d      	cbnz	r5, 800526e <_printf_i+0x11a>
 800526a:	2e00      	cmp	r6, #0
 800526c:	d04d      	beq.n	800530a <_printf_i+0x1b6>
 800526e:	4616      	mov	r6, r2
 8005270:	fbb5 f1f3 	udiv	r1, r5, r3
 8005274:	fb03 5711 	mls	r7, r3, r1, r5
 8005278:	5dc7      	ldrb	r7, [r0, r7]
 800527a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800527e:	462f      	mov	r7, r5
 8005280:	42bb      	cmp	r3, r7
 8005282:	460d      	mov	r5, r1
 8005284:	d9f4      	bls.n	8005270 <_printf_i+0x11c>
 8005286:	2b08      	cmp	r3, #8
 8005288:	d10b      	bne.n	80052a2 <_printf_i+0x14e>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	07df      	lsls	r7, r3, #31
 800528e:	d508      	bpl.n	80052a2 <_printf_i+0x14e>
 8005290:	6923      	ldr	r3, [r4, #16]
 8005292:	6861      	ldr	r1, [r4, #4]
 8005294:	4299      	cmp	r1, r3
 8005296:	bfde      	ittt	le
 8005298:	2330      	movle	r3, #48	; 0x30
 800529a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800529e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052a2:	1b92      	subs	r2, r2, r6
 80052a4:	6122      	str	r2, [r4, #16]
 80052a6:	464b      	mov	r3, r9
 80052a8:	4621      	mov	r1, r4
 80052aa:	4640      	mov	r0, r8
 80052ac:	f8cd a000 	str.w	sl, [sp]
 80052b0:	aa03      	add	r2, sp, #12
 80052b2:	f7ff fedf 	bl	8005074 <_printf_common>
 80052b6:	3001      	adds	r0, #1
 80052b8:	d14c      	bne.n	8005354 <_printf_i+0x200>
 80052ba:	f04f 30ff 	mov.w	r0, #4294967295
 80052be:	b004      	add	sp, #16
 80052c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c4:	4834      	ldr	r0, [pc, #208]	; (8005398 <_printf_i+0x244>)
 80052c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052ca:	680e      	ldr	r6, [r1, #0]
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80052d2:	061f      	lsls	r7, r3, #24
 80052d4:	600e      	str	r6, [r1, #0]
 80052d6:	d514      	bpl.n	8005302 <_printf_i+0x1ae>
 80052d8:	07d9      	lsls	r1, r3, #31
 80052da:	bf44      	itt	mi
 80052dc:	f043 0320 	orrmi.w	r3, r3, #32
 80052e0:	6023      	strmi	r3, [r4, #0]
 80052e2:	b91d      	cbnz	r5, 80052ec <_printf_i+0x198>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	f023 0320 	bic.w	r3, r3, #32
 80052ea:	6023      	str	r3, [r4, #0]
 80052ec:	2310      	movs	r3, #16
 80052ee:	e7af      	b.n	8005250 <_printf_i+0xfc>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	f043 0320 	orr.w	r3, r3, #32
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	2378      	movs	r3, #120	; 0x78
 80052fa:	4828      	ldr	r0, [pc, #160]	; (800539c <_printf_i+0x248>)
 80052fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005300:	e7e3      	b.n	80052ca <_printf_i+0x176>
 8005302:	065e      	lsls	r6, r3, #25
 8005304:	bf48      	it	mi
 8005306:	b2ad      	uxthmi	r5, r5
 8005308:	e7e6      	b.n	80052d8 <_printf_i+0x184>
 800530a:	4616      	mov	r6, r2
 800530c:	e7bb      	b.n	8005286 <_printf_i+0x132>
 800530e:	680b      	ldr	r3, [r1, #0]
 8005310:	6826      	ldr	r6, [r4, #0]
 8005312:	1d1d      	adds	r5, r3, #4
 8005314:	6960      	ldr	r0, [r4, #20]
 8005316:	600d      	str	r5, [r1, #0]
 8005318:	0635      	lsls	r5, r6, #24
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	d501      	bpl.n	8005322 <_printf_i+0x1ce>
 800531e:	6018      	str	r0, [r3, #0]
 8005320:	e002      	b.n	8005328 <_printf_i+0x1d4>
 8005322:	0671      	lsls	r1, r6, #25
 8005324:	d5fb      	bpl.n	800531e <_printf_i+0x1ca>
 8005326:	8018      	strh	r0, [r3, #0]
 8005328:	2300      	movs	r3, #0
 800532a:	4616      	mov	r6, r2
 800532c:	6123      	str	r3, [r4, #16]
 800532e:	e7ba      	b.n	80052a6 <_printf_i+0x152>
 8005330:	680b      	ldr	r3, [r1, #0]
 8005332:	1d1a      	adds	r2, r3, #4
 8005334:	600a      	str	r2, [r1, #0]
 8005336:	681e      	ldr	r6, [r3, #0]
 8005338:	2100      	movs	r1, #0
 800533a:	4630      	mov	r0, r6
 800533c:	6862      	ldr	r2, [r4, #4]
 800533e:	f000 f8d9 	bl	80054f4 <memchr>
 8005342:	b108      	cbz	r0, 8005348 <_printf_i+0x1f4>
 8005344:	1b80      	subs	r0, r0, r6
 8005346:	6060      	str	r0, [r4, #4]
 8005348:	6863      	ldr	r3, [r4, #4]
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	2300      	movs	r3, #0
 800534e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005352:	e7a8      	b.n	80052a6 <_printf_i+0x152>
 8005354:	4632      	mov	r2, r6
 8005356:	4649      	mov	r1, r9
 8005358:	4640      	mov	r0, r8
 800535a:	6923      	ldr	r3, [r4, #16]
 800535c:	47d0      	blx	sl
 800535e:	3001      	adds	r0, #1
 8005360:	d0ab      	beq.n	80052ba <_printf_i+0x166>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	079b      	lsls	r3, r3, #30
 8005366:	d413      	bmi.n	8005390 <_printf_i+0x23c>
 8005368:	68e0      	ldr	r0, [r4, #12]
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	4298      	cmp	r0, r3
 800536e:	bfb8      	it	lt
 8005370:	4618      	movlt	r0, r3
 8005372:	e7a4      	b.n	80052be <_printf_i+0x16a>
 8005374:	2301      	movs	r3, #1
 8005376:	4632      	mov	r2, r6
 8005378:	4649      	mov	r1, r9
 800537a:	4640      	mov	r0, r8
 800537c:	47d0      	blx	sl
 800537e:	3001      	adds	r0, #1
 8005380:	d09b      	beq.n	80052ba <_printf_i+0x166>
 8005382:	3501      	adds	r5, #1
 8005384:	68e3      	ldr	r3, [r4, #12]
 8005386:	9903      	ldr	r1, [sp, #12]
 8005388:	1a5b      	subs	r3, r3, r1
 800538a:	42ab      	cmp	r3, r5
 800538c:	dcf2      	bgt.n	8005374 <_printf_i+0x220>
 800538e:	e7eb      	b.n	8005368 <_printf_i+0x214>
 8005390:	2500      	movs	r5, #0
 8005392:	f104 0619 	add.w	r6, r4, #25
 8005396:	e7f5      	b.n	8005384 <_printf_i+0x230>
 8005398:	0800562d 	.word	0x0800562d
 800539c:	0800563e 	.word	0x0800563e

080053a0 <_sbrk_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	2300      	movs	r3, #0
 80053a4:	4d05      	ldr	r5, [pc, #20]	; (80053bc <_sbrk_r+0x1c>)
 80053a6:	4604      	mov	r4, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	602b      	str	r3, [r5, #0]
 80053ac:	f7ff f8a2 	bl	80044f4 <_sbrk>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_sbrk_r+0x1a>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_sbrk_r+0x1a>
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	20001098 	.word	0x20001098

080053c0 <__sread>:
 80053c0:	b510      	push	{r4, lr}
 80053c2:	460c      	mov	r4, r1
 80053c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c8:	f000 f8ae 	bl	8005528 <_read_r>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	bfab      	itete	ge
 80053d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053d2:	89a3      	ldrhlt	r3, [r4, #12]
 80053d4:	181b      	addge	r3, r3, r0
 80053d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053da:	bfac      	ite	ge
 80053dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80053de:	81a3      	strhlt	r3, [r4, #12]
 80053e0:	bd10      	pop	{r4, pc}

080053e2 <__swrite>:
 80053e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e6:	461f      	mov	r7, r3
 80053e8:	898b      	ldrh	r3, [r1, #12]
 80053ea:	4605      	mov	r5, r0
 80053ec:	05db      	lsls	r3, r3, #23
 80053ee:	460c      	mov	r4, r1
 80053f0:	4616      	mov	r6, r2
 80053f2:	d505      	bpl.n	8005400 <__swrite+0x1e>
 80053f4:	2302      	movs	r3, #2
 80053f6:	2200      	movs	r2, #0
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	f000 f868 	bl	80054d0 <_lseek_r>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	4632      	mov	r2, r6
 8005404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005408:	81a3      	strh	r3, [r4, #12]
 800540a:	4628      	mov	r0, r5
 800540c:	463b      	mov	r3, r7
 800540e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	f000 b817 	b.w	8005448 <_write_r>

0800541a <__sseek>:
 800541a:	b510      	push	{r4, lr}
 800541c:	460c      	mov	r4, r1
 800541e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005422:	f000 f855 	bl	80054d0 <_lseek_r>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	bf15      	itete	ne
 800542c:	6560      	strne	r0, [r4, #84]	; 0x54
 800542e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005436:	81a3      	strheq	r3, [r4, #12]
 8005438:	bf18      	it	ne
 800543a:	81a3      	strhne	r3, [r4, #12]
 800543c:	bd10      	pop	{r4, pc}

0800543e <__sclose>:
 800543e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005442:	f000 b813 	b.w	800546c <_close_r>
	...

08005448 <_write_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	4611      	mov	r1, r2
 8005450:	2200      	movs	r2, #0
 8005452:	4d05      	ldr	r5, [pc, #20]	; (8005468 <_write_r+0x20>)
 8005454:	602a      	str	r2, [r5, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	f7ff f826 	bl	80044a8 <_write>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_write_r+0x1e>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_write_r+0x1e>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	20001098 	.word	0x20001098

0800546c <_close_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	2300      	movs	r3, #0
 8005470:	4d05      	ldr	r5, [pc, #20]	; (8005488 <_close_r+0x1c>)
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	f7ff f82e 	bl	80044d8 <_close>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_close_r+0x1a>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b103      	cbz	r3, 8005486 <_close_r+0x1a>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	20001098 	.word	0x20001098

0800548c <_fstat_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	2300      	movs	r3, #0
 8005490:	4d06      	ldr	r5, [pc, #24]	; (80054ac <_fstat_r+0x20>)
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	4611      	mov	r1, r2
 8005498:	602b      	str	r3, [r5, #0]
 800549a:	f7ff f821 	bl	80044e0 <_fstat>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	d102      	bne.n	80054a8 <_fstat_r+0x1c>
 80054a2:	682b      	ldr	r3, [r5, #0]
 80054a4:	b103      	cbz	r3, 80054a8 <_fstat_r+0x1c>
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	bd38      	pop	{r3, r4, r5, pc}
 80054aa:	bf00      	nop
 80054ac:	20001098 	.word	0x20001098

080054b0 <_isatty_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	2300      	movs	r3, #0
 80054b4:	4d05      	ldr	r5, [pc, #20]	; (80054cc <_isatty_r+0x1c>)
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7ff f816 	bl	80044ec <_isatty>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_isatty_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_isatty_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	20001098 	.word	0x20001098

080054d0 <_lseek_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	2200      	movs	r2, #0
 80054da:	4d05      	ldr	r5, [pc, #20]	; (80054f0 <_lseek_r+0x20>)
 80054dc:	602a      	str	r2, [r5, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f7ff f806 	bl	80044f0 <_lseek>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_lseek_r+0x1e>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_lseek_r+0x1e>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20001098 	.word	0x20001098

080054f4 <memchr>:
 80054f4:	4603      	mov	r3, r0
 80054f6:	b510      	push	{r4, lr}
 80054f8:	b2c9      	uxtb	r1, r1
 80054fa:	4402      	add	r2, r0
 80054fc:	4293      	cmp	r3, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	d101      	bne.n	8005506 <memchr+0x12>
 8005502:	2000      	movs	r0, #0
 8005504:	e003      	b.n	800550e <memchr+0x1a>
 8005506:	7804      	ldrb	r4, [r0, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	428c      	cmp	r4, r1
 800550c:	d1f6      	bne.n	80054fc <memchr+0x8>
 800550e:	bd10      	pop	{r4, pc}

08005510 <__malloc_lock>:
 8005510:	4801      	ldr	r0, [pc, #4]	; (8005518 <__malloc_lock+0x8>)
 8005512:	f7ff bb4b 	b.w	8004bac <__retarget_lock_acquire_recursive>
 8005516:	bf00      	nop
 8005518:	20001090 	.word	0x20001090

0800551c <__malloc_unlock>:
 800551c:	4801      	ldr	r0, [pc, #4]	; (8005524 <__malloc_unlock+0x8>)
 800551e:	f7ff bb46 	b.w	8004bae <__retarget_lock_release_recursive>
 8005522:	bf00      	nop
 8005524:	20001090 	.word	0x20001090

08005528 <_read_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4604      	mov	r4, r0
 800552c:	4608      	mov	r0, r1
 800552e:	4611      	mov	r1, r2
 8005530:	2200      	movs	r2, #0
 8005532:	4d05      	ldr	r5, [pc, #20]	; (8005548 <_read_r+0x20>)
 8005534:	602a      	str	r2, [r5, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	f7fe ffa8 	bl	800448c <_read>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d102      	bne.n	8005546 <_read_r+0x1e>
 8005540:	682b      	ldr	r3, [r5, #0]
 8005542:	b103      	cbz	r3, 8005546 <_read_r+0x1e>
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	bd38      	pop	{r3, r4, r5, pc}
 8005548:	20001098 	.word	0x20001098

0800554c <_init>:
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	bf00      	nop
 8005550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005552:	bc08      	pop	{r3}
 8005554:	469e      	mov	lr, r3
 8005556:	4770      	bx	lr

08005558 <_fini>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr
